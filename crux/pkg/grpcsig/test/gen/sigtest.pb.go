// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sigtest.proto

/*
Package sigtest is a generated protocol buffer package.

It is generated from these files:
	sigtest.proto

It has these top-level messages:
	SigtestRequest
	SigtestResponse
	SigtestAll
*/
package sigtest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message for creating a new sigtest
type SigtestRequest struct {
	Id         int32                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name       string                      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Sigstreams []*SigtestRequest_SigStream `protobuf:"bytes,3,rep,name=sigstreams" json:"sigstreams,omitempty"`
}

func (m *SigtestRequest) Reset()                    { *m = SigtestRequest{} }
func (m *SigtestRequest) String() string            { return proto.CompactTextString(m) }
func (*SigtestRequest) ProtoMessage()               {}
func (*SigtestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SigtestRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SigtestRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SigtestRequest) GetSigstreams() []*SigtestRequest_SigStream {
	if m != nil {
		return m.Sigstreams
	}
	return nil
}

type SigtestRequest_SigStream struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *SigtestRequest_SigStream) Reset()                    { *m = SigtestRequest_SigStream{} }
func (m *SigtestRequest_SigStream) String() string            { return proto.CompactTextString(m) }
func (*SigtestRequest_SigStream) ProtoMessage()               {}
func (*SigtestRequest_SigStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *SigtestRequest_SigStream) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type SigtestResponse struct {
	Id      int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *SigtestResponse) Reset()                    { *m = SigtestResponse{} }
func (m *SigtestResponse) String() string            { return proto.CompactTextString(m) }
func (*SigtestResponse) ProtoMessage()               {}
func (*SigtestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SigtestResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SigtestResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SigtestAll struct {
	IsAll bool `protobuf:"varint,1,opt,name=isAll" json:"isAll,omitempty"`
}

func (m *SigtestAll) Reset()                    { *m = SigtestAll{} }
func (m *SigtestAll) String() string            { return proto.CompactTextString(m) }
func (*SigtestAll) ProtoMessage()               {}
func (*SigtestAll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SigtestAll) GetIsAll() bool {
	if m != nil {
		return m.IsAll
	}
	return false
}

func init() {
	proto.RegisterType((*SigtestRequest)(nil), "sigtest.SigtestRequest")
	proto.RegisterType((*SigtestRequest_SigStream)(nil), "sigtest.SigtestRequest.SigStream")
	proto.RegisterType((*SigtestResponse)(nil), "sigtest.SigtestResponse")
	proto.RegisterType((*SigtestAll)(nil), "sigtest.SigtestAll")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sigtest service

type SigtestClient interface {
	// Get all Sigtests with filter - A server-to-client streaming RPC.
	GetSigtests(ctx context.Context, in *SigtestAll, opts ...grpc.CallOption) (Sigtest_GetSigtestsClient, error)
	// Create a new Sigtest - A simple RPC
	CreateSigtest(ctx context.Context, in *SigtestRequest, opts ...grpc.CallOption) (*SigtestResponse, error)
}

type sigtestClient struct {
	cc *grpc.ClientConn
}

func NewSigtestClient(cc *grpc.ClientConn) SigtestClient {
	return &sigtestClient{cc}
}

func (c *sigtestClient) GetSigtests(ctx context.Context, in *SigtestAll, opts ...grpc.CallOption) (Sigtest_GetSigtestsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sigtest_serviceDesc.Streams[0], c.cc, "/sigtest.Sigtest/GetSigtests", opts...)
	if err != nil {
		return nil, err
	}
	x := &sigtestGetSigtestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sigtest_GetSigtestsClient interface {
	Recv() (*SigtestRequest, error)
	grpc.ClientStream
}

type sigtestGetSigtestsClient struct {
	grpc.ClientStream
}

func (x *sigtestGetSigtestsClient) Recv() (*SigtestRequest, error) {
	m := new(SigtestRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sigtestClient) CreateSigtest(ctx context.Context, in *SigtestRequest, opts ...grpc.CallOption) (*SigtestResponse, error) {
	out := new(SigtestResponse)
	err := grpc.Invoke(ctx, "/sigtest.Sigtest/CreateSigtest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sigtest service

type SigtestServer interface {
	// Get all Sigtests with filter - A server-to-client streaming RPC.
	GetSigtests(*SigtestAll, Sigtest_GetSigtestsServer) error
	// Create a new Sigtest - A simple RPC
	CreateSigtest(context.Context, *SigtestRequest) (*SigtestResponse, error)
}

func RegisterSigtestServer(s *grpc.Server, srv SigtestServer) {
	s.RegisterService(&_Sigtest_serviceDesc, srv)
}

func _Sigtest_GetSigtests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SigtestAll)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SigtestServer).GetSigtests(m, &sigtestGetSigtestsServer{stream})
}

type Sigtest_GetSigtestsServer interface {
	Send(*SigtestRequest) error
	grpc.ServerStream
}

type sigtestGetSigtestsServer struct {
	grpc.ServerStream
}

func (x *sigtestGetSigtestsServer) Send(m *SigtestRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Sigtest_CreateSigtest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigtestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigtestServer).CreateSigtest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sigtest.Sigtest/CreateSigtest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigtestServer).CreateSigtest(ctx, req.(*SigtestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sigtest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sigtest.Sigtest",
	HandlerType: (*SigtestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSigtest",
			Handler:    _Sigtest_CreateSigtest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSigtests",
			Handler:       _Sigtest_GetSigtests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sigtest.proto",
}

func init() { proto.RegisterFile("sigtest.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0xed, 0x26, 0xd6, 0x34, 0x53, 0x5a, 0x65, 0x14, 0x5c, 0x02, 0x42, 0xdc, 0x53, 0x4e, 0x45,
	0xea, 0xd1, 0x83, 0x04, 0x05, 0xef, 0xdb, 0x2f, 0x88, 0xed, 0x50, 0x16, 0xb6, 0x4d, 0xcd, 0x6c,
	0xfe, 0xc3, 0x93, 0xdf, 0x2b, 0xdd, 0x6c, 0x8a, 0x5a, 0x72, 0x7b, 0x8f, 0x79, 0xef, 0xcd, 0x3c,
	0x06, 0x66, 0x6c, 0xb6, 0x8e, 0xd8, 0x2d, 0x0e, 0x4d, 0xed, 0x6a, 0x4c, 0x02, 0x55, 0xdf, 0x02,
	0xe6, 0xab, 0x0e, 0x6b, 0xfa, 0x6c, 0x89, 0x1d, 0xce, 0x21, 0x32, 0x1b, 0x29, 0x72, 0x51, 0x8c,
	0x75, 0x64, 0x36, 0x88, 0x70, 0xb1, 0xaf, 0x76, 0x24, 0xa3, 0x5c, 0x14, 0xa9, 0xf6, 0x18, 0x4b,
	0x00, 0x36, 0x5b, 0x76, 0x0d, 0x55, 0x3b, 0x96, 0x71, 0x1e, 0x17, 0xd3, 0xe5, 0xc3, 0xa2, 0xdf,
	0xf1, 0x37, 0xf0, 0x48, 0x57, 0x5e, 0xa9, 0x7f, 0x99, 0xb2, 0x7b, 0x48, 0x4f, 0x03, 0xbc, 0x86,
	0xb8, 0x0d, 0x4b, 0x53, 0x7d, 0x84, 0xea, 0x19, 0xae, 0x4e, 0x31, 0x7c, 0xa8, 0xf7, 0x4c, 0x67,
	0x87, 0x49, 0x48, 0xb8, 0x5d, 0xaf, 0x89, 0xd9, 0xdf, 0x36, 0xd1, 0x3d, 0x55, 0x0a, 0x20, 0x98,
	0x4b, 0x6b, 0xf1, 0x16, 0xc6, 0x86, 0x4b, 0x6b, 0xbd, 0x75, 0xa2, 0x3b, 0xb2, 0xfc, 0x12, 0x90,
	0x04, 0x11, 0xbe, 0xc0, 0xf4, 0x9d, 0x5c, 0x60, 0x8c, 0x37, 0xff, 0x9b, 0x94, 0xd6, 0x66, 0x77,
	0x03, 0xf5, 0xd4, 0xe8, 0x51, 0xe0, 0x1b, 0xcc, 0x5e, 0x1b, 0xaa, 0x1c, 0xf5, 0x89, 0x43, 0xea,
	0x4c, 0x9e, 0x0f, 0xba, 0x7a, 0x6a, 0xf4, 0x71, 0xe9, 0x9f, 0xf3, 0xf4, 0x13, 0x00, 0x00, 0xff,
	0xff, 0xf6, 0x5a, 0xaa, 0xe4, 0xad, 0x01, 0x00, 0x00,
}
