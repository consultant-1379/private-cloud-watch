package lib

// DO NOT EDIT THIS FILE!! this is code generated by enumerator

import "fmt"

// StatementType is the kind of statement.
type StatementType int

// define the various symbolic constants for type StatementType
const (
	StatementVar      StatementType = 0
	StatementCallDict StatementType = 1
	StatementCallFunc StatementType = 2
	StatementDict     StatementType = 3
	StatementApply    StatementType = 4
	StatementFunc     StatementType = 5
	StatementCd       StatementType = 6
	StatementMount    StatementType = 7
)

// String converts StatementType values into strings.
func (x StatementType) String() string {
	switch x {
	case StatementApply:
		return "StatementApply"
	case StatementCallDict:
		return "StatementCallDict"
	case StatementCallFunc:
		return "StatementCallFunc"
	case StatementCd:
		return "StatementCd"
	case StatementDict:
		return "StatementDict"
	case StatementFunc:
		return "StatementFunc"
	case StatementMount:
		return "StatementMount"
	case StatementVar:
		return "StatementVar"
	}
	return fmt.Sprintf("unknown_StatementType_%d", x)
}

// EntType is the kind of Ent.
type EntType int

// define the various symbolic constants for type EntType
const (
	EntMissing EntType = 0
	EntPretend EntType = 1
	EntExist   EntType = 2
	EntNeed    EntType = 3
	EntMax     EntType = 4
)

// String converts EntType values into strings.
func (x EntType) String() string {
	switch x {
	case EntExist:
		return "EntExist"
	case EntMax:
		return "EntMax"
	case EntMissing:
		return "EntMissing"
	case EntNeed:
		return "EntNeed"
	case EntPretend:
		return "EntPretend"
	}
	return fmt.Sprintf("unknown_EntType_%d", x)
}

// FSEType is the type of EventFS
type FSEType int

// define the various symbolic constants for type FSEType
const (
	FSEnormal     FSEType = 0
	FSEdelete     FSEType = 1
	FSEexecstatus FSEType = 2
)

// String converts FSEType values into strings.
func (x FSEType) String() string {
	switch x {
	case FSEdelete:
		return "FSEdelete"
	case FSEexecstatus:
		return "FSEexecstatus"
	case FSEnormal:
		return "FSEnormal"
	}
	return fmt.Sprintf("unknown_FSEType_%d", x)
}

// FSRouterOp is the kind of operator.
type FSRouterOp int

// define the various symbolic constants for type FSRouterOp
const (
	FSRopen   FSRouterOp = 0
	FSRprefix FSRouterOp = 1
	FSRclose  FSRouterOp = 2
	FSRexit   FSRouterOp = 3
)

// String converts FSRouterOp values into strings.
func (x FSRouterOp) String() string {
	switch x {
	case FSRclose:
		return "FSRclose"
	case FSRexit:
		return "FSRexit"
	case FSRopen:
		return "FSRopen"
	case FSRprefix:
		return "FSRprefix"
	}
	return fmt.Sprintf("unknown_FSRouterOp_%d", x)
}

// ECOp is the type of control operation
type ECOp int

// define the various symbolic constants for type ECOp
const (
	OpQuit  ECOp = 0
	OpCrank ECOp = 1
	OpExec  ECOp = 2
	OpDone  ECOp = 3 // signal that the chore is done and resources released
)

// String converts ECOp values into strings.
func (x ECOp) String() string {
	switch x {
	case OpCrank:
		return "OpCrank"
	case OpDone:
		return "OpDone"
	case OpExec:
		return "OpExec"
	case OpQuit:
		return "OpQuit"
	}
	return fmt.Sprintf("unknown_ECOp_%d", x)
}

// StatusType is the chore's status.
type StatusType int

// define the various symbolic constants for type StatusType
const (
	StatusStart    StatusType = 0
	StatusPretend  StatusType = 1
	StatusWaiting  StatusType = 2
	StatusCanRun   StatusType = 3
	StatusRunning  StatusType = 4
	StatusExecuted StatusType = 5
	StatusError    StatusType = 6
	StatusQuit     StatusType = 7
)

// String converts StatusType values into strings.
func (x StatusType) String() string {
	switch x {
	case StatusCanRun:
		return "StatusCanRun"
	case StatusError:
		return "StatusError"
	case StatusExecuted:
		return "StatusExecuted"
	case StatusPretend:
		return "StatusPretend"
	case StatusQuit:
		return "StatusQuit"
	case StatusRunning:
		return "StatusRunning"
	case StatusStart:
		return "StatusStart"
	case StatusWaiting:
		return "StatusWaiting"
	}
	return fmt.Sprintf("unknown_StatusType_%d", x)
}

// tokenType is internal parsing token.
type tokenType int

// define the various symbolic constants for type tokenType
const (
	tokenError    tokenType = 0
	tokenWord     tokenType = 1
	tokenColon    tokenType = 2
	tokenEqual    tokenType = 3
	tokenOther    tokenType = 4
	tokenLSB      tokenType = 5
	tokenRSB      tokenType = 6
	tokenLpar     tokenType = 7
	tokenRpar     tokenType = 8
	tokenLbrace   tokenType = 9
	tokenRbrace   tokenType = 10
	tokenString   tokenType = 11
	tokenVerbatim tokenType = 12
	tokenNL       tokenType = 13
	tokenWS       tokenType = 14
	tokenEOF      tokenType = 15
)

// String converts tokenType values into strings.
func (x tokenType) String() string {
	switch x {
	case tokenColon:
		return "tokenColon"
	case tokenEOF:
		return "tokenEOF"
	case tokenEqual:
		return "tokenEqual"
	case tokenError:
		return "tokenError"
	case tokenLSB:
		return "tokenLSB"
	case tokenLbrace:
		return "tokenLbrace"
	case tokenLpar:
		return "tokenLpar"
	case tokenNL:
		return "tokenNL"
	case tokenOther:
		return "tokenOther"
	case tokenRSB:
		return "tokenRSB"
	case tokenRbrace:
		return "tokenRbrace"
	case tokenRpar:
		return "tokenRpar"
	case tokenString:
		return "tokenString"
	case tokenVerbatim:
		return "tokenVerbatim"
	case tokenWS:
		return "tokenWS"
	case tokenWord:
		return "tokenWord"
	}
	return fmt.Sprintf("unknown_tokenType_%d", x)
}
