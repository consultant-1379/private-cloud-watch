// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bar.proto

package cruxgen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("bar.proto", fileDescriptor_b8fca82f8db7cb01) }

var fileDescriptor_b8fca82f8db7cb01 = []byte{
	// 89 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x4a, 0x2c, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x2e, 0x2a, 0xad, 0x48, 0x4f, 0xcd, 0x93, 0xe2,
	0x2a, 0xc8, 0xcc, 0x4b, 0x87, 0x08, 0x1a, 0x19, 0x72, 0x31, 0x3b, 0x25, 0x16, 0x09, 0x69, 0x71,
	0x71, 0x04, 0x64, 0xe6, 0xa5, 0x87, 0xa4, 0x16, 0x97, 0x08, 0xf1, 0xea, 0x41, 0x15, 0xea, 0x81,
	0x84, 0xa4, 0x50, 0xb9, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x9d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf7, 0x07, 0x8b, 0x9b, 0x5b, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BarClient is the client API for Bar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BarClient interface {
	PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error)
}

type barClient struct {
	cc *grpc.ClientConn
}

func NewBarClient(cc *grpc.ClientConn) BarClient {
	return &barClient{cc}
}

func (c *barClient) PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := c.cc.Invoke(ctx, "/cruxgen.Bar/PingTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarServer is the server API for Bar service.
type BarServer interface {
	PingTest(context.Context, *Ping) (*Ping, error)
}

func RegisterBarServer(s *grpc.Server, srv BarServer) {
	s.RegisterService(&_Bar_serviceDesc, srv)
}

func _Bar_PingTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServer).PingTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Bar/PingTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServer).PingTest(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cruxgen.Bar",
	HandlerType: (*BarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingTest",
			Handler:    _Bar_PingTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bar.proto",
}
