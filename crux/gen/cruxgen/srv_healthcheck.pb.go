// Code generated by protoc-gen-go. DO NOT EDIT.
// source: srv_healthcheck.proto

package cruxgen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServingStatus int32

const (
	ServingStatus_UNKNOWN         ServingStatus = 0
	ServingStatus_SERVING         ServingStatus = 1
	ServingStatus_NOT_SERVING     ServingStatus = 2
	ServingStatus_SERVICE_UNKNOWN ServingStatus = 3
)

var ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
	3: "SERVICE_UNKNOWN",
}

var ServingStatus_value = map[string]int32{
	"UNKNOWN":         0,
	"SERVING":         1,
	"NOT_SERVING":     2,
	"SERVICE_UNKNOWN": 3,
}

func (x ServingStatus) String() string {
	return proto.EnumName(ServingStatus_name, int32(x))
}

func (ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04c7f4459ff8159e, []int{0}
}

type HealthCheckRequest struct {
	Srvice               string   `protobuf:"bytes,1,opt,name=srvice,proto3" json:"srvice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04c7f4459ff8159e, []int{0}
}

func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckRequest.Unmarshal(m, b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return xxx_messageInfo_HealthCheckRequest.Size(m)
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

func (m *HealthCheckRequest) GetSrvice() string {
	if m != nil {
		return m.Srvice
	}
	return ""
}

type HealthCheckResponse struct {
	Status               ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=cruxgen.ServingStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04c7f4459ff8159e, []int{1}
}

func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckResponse.Unmarshal(m, b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return xxx_messageInfo_HealthCheckResponse.Size(m)
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetStatus() ServingStatus {
	if m != nil {
		return m.Status
	}
	return ServingStatus_UNKNOWN
}

type HeartbeatsResponse struct {
	List                 []*HeartbeatReq `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HeartbeatsResponse) Reset()         { *m = HeartbeatsResponse{} }
func (m *HeartbeatsResponse) String() string { return proto.CompactTextString(m) }
func (*HeartbeatsResponse) ProtoMessage()    {}
func (*HeartbeatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04c7f4459ff8159e, []int{2}
}

func (m *HeartbeatsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatsResponse.Unmarshal(m, b)
}
func (m *HeartbeatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatsResponse.Marshal(b, m, deterministic)
}
func (m *HeartbeatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatsResponse.Merge(m, src)
}
func (m *HeartbeatsResponse) XXX_Size() int {
	return xxx_messageInfo_HeartbeatsResponse.Size(m)
}
func (m *HeartbeatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatsResponse proto.InternalMessageInfo

func (m *HeartbeatsResponse) GetList() []*HeartbeatReq {
	if m != nil {
		return m.List
	}
	return nil
}

type AbsorbResponse struct {
	Err                  *Err     `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbsorbResponse) Reset()         { *m = AbsorbResponse{} }
func (m *AbsorbResponse) String() string { return proto.CompactTextString(m) }
func (*AbsorbResponse) ProtoMessage()    {}
func (*AbsorbResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04c7f4459ff8159e, []int{3}
}

func (m *AbsorbResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbsorbResponse.Unmarshal(m, b)
}
func (m *AbsorbResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbsorbResponse.Marshal(b, m, deterministic)
}
func (m *AbsorbResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbsorbResponse.Merge(m, src)
}
func (m *AbsorbResponse) XXX_Size() int {
	return xxx_messageInfo_AbsorbResponse.Size(m)
}
func (m *AbsorbResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AbsorbResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AbsorbResponse proto.InternalMessageInfo

func (m *AbsorbResponse) GetErr() *Err {
	if m != nil {
		return m.Err
	}
	return nil
}

func init() {
	proto.RegisterEnum("cruxgen.ServingStatus", ServingStatus_name, ServingStatus_value)
	proto.RegisterType((*HealthCheckRequest)(nil), "cruxgen.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "cruxgen.HealthCheckResponse")
	proto.RegisterType((*HeartbeatsResponse)(nil), "cruxgen.HeartbeatsResponse")
	proto.RegisterType((*AbsorbResponse)(nil), "cruxgen.AbsorbResponse")
}

func init() { proto.RegisterFile("srv_healthcheck.proto", fileDescriptor_04c7f4459ff8159e) }

var fileDescriptor_04c7f4459ff8159e = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x5d, 0xaf, 0xd2, 0x40,
	0x10, 0x6d, 0x01, 0x41, 0xa6, 0xf2, 0x91, 0x25, 0x20, 0x29, 0xc6, 0x90, 0x7d, 0x42, 0x62, 0x1a,
	0x53, 0x1f, 0x7d, 0x30, 0x8a, 0x8d, 0x1a, 0x93, 0xa2, 0x0b, 0xea, 0x23, 0x69, 0x9b, 0x4d, 0xdb,
	0x88, 0x6d, 0xd9, 0xdd, 0x12, 0xf9, 0x5d, 0xfe, 0xc1, 0x9b, 0x6e, 0xcb, 0x42, 0xb9, 0x37, 0xf7,
	0x6d, 0xce, 0x9c, 0x73, 0x66, 0x66, 0x4f, 0x16, 0xc6, 0x9c, 0x1d, 0x77, 0x11, 0xf5, 0xf6, 0x22,
	0x0a, 0x22, 0x1a, 0xfc, 0xb1, 0x32, 0x96, 0x8a, 0x14, 0x75, 0x02, 0x96, 0xff, 0x0b, 0x69, 0x62,
	0x0e, 0x22, 0xea, 0x31, 0xe1, 0x53, 0x4f, 0x94, 0x8c, 0x09, 0x59, 0x9c, 0x84, 0x55, 0xdd, 0xe3,
	0x94, 0x1d, 0xe3, 0x80, 0x56, 0xb0, 0x4b, 0x19, 0x2b, 0x4b, 0xfc, 0x1a, 0xd0, 0x17, 0x39, 0x74,
	0x55, 0x0c, 0x25, 0xf4, 0x90, 0x53, 0x2e, 0xd0, 0x04, 0xda, 0x5c, 0x1a, 0xa6, 0xfa, 0x5c, 0x5f,
	0x74, 0x49, 0x85, 0xb0, 0x03, 0xa3, 0x9a, 0x9a, 0x67, 0x69, 0xc2, 0x29, 0xb2, 0xa0, 0xcd, 0x85,
	0x27, 0x72, 0x2e, 0xe5, 0x7d, 0x7b, 0x62, 0x55, 0x57, 0x59, 0x9b, 0x62, 0x6f, 0x12, 0x6e, 0x24,
	0x4b, 0x2a, 0x15, 0x7e, 0x2f, 0x97, 0x96, 0xd7, 0x72, 0x35, 0xe5, 0x15, 0xb4, 0xf6, 0x31, 0x17,
	0x53, 0x7d, 0xde, 0x5c, 0x18, 0xf6, 0x58, 0xcd, 0x50, 0x52, 0x42, 0x0f, 0x44, 0x4a, 0xf0, 0x1b,
	0xe8, 0x7f, 0xf0, 0x79, 0xca, 0x7c, 0x65, 0x7e, 0x09, 0x4d, 0xca, 0x98, 0xdc, 0x6f, 0xd8, 0xcf,
	0x94, 0xd7, 0x61, 0x8c, 0x14, 0xc4, 0x72, 0x0d, 0xbd, 0xda, 0x2d, 0xc8, 0x80, 0xce, 0x4f, 0xf7,
	0x9b, 0xbb, 0xfe, 0xed, 0x0e, 0xb5, 0x02, 0x6c, 0x1c, 0xf2, 0xeb, 0xab, 0xfb, 0x79, 0xa8, 0xa3,
	0x01, 0x18, 0xee, 0x7a, 0xbb, 0x3b, 0x37, 0x1a, 0x68, 0x04, 0x03, 0x09, 0x56, 0xce, 0xee, 0x6c,
	0x69, 0xda, 0xff, 0x1b, 0x60, 0x5c, 0x65, 0x81, 0x3e, 0xc1, 0x93, 0xb2, 0x98, 0x5d, 0x1f, 0x7e,
	0x13, 0xac, 0xf9, 0xe2, 0x61, 0xb2, 0x7c, 0x04, 0xd6, 0xd0, 0x3b, 0x80, 0x4b, 0x32, 0xa8, 0x7f,
	0x79, 0xc7, 0xdf, 0x4c, 0x9c, 0xcc, 0xd9, 0xfd, 0x4c, 0xf8, 0x95, 0xd9, 0x01, 0xa3, 0x4c, 0xe5,
	0xa3, 0x74, 0x3f, 0xa6, 0x36, 0x9f, 0x2b, 0xb2, 0x1e, 0x24, 0xd6, 0xd0, 0x12, 0x9e, 0x7e, 0x8f,
	0x93, 0x70, 0x5b, 0x7c, 0x84, 0x9e, 0x92, 0x15, 0x2d, 0xb3, 0x0e, 0xb1, 0x86, 0x2c, 0x68, 0xfd,
	0xc8, 0x63, 0x81, 0x86, 0x8a, 0x28, 0x20, 0xa1, 0x07, 0x13, 0xdd, 0x74, 0xb2, 0xfd, 0x09, 0x6b,
	0x7e, 0x5b, 0xfe, 0xba, 0xb7, 0x77, 0x01, 0x00, 0x00, 0xff, 0xff, 0xac, 0x86, 0xac, 0x9f, 0xce,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealthCheckClient is the client API for HealthCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthCheckClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Heartbeats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeartbeatsResponse, error)
	AbsorbBeats(ctx context.Context, in *HeartbeatsResponse, opts ...grpc.CallOption) (*AbsorbResponse, error)
	PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error)
	Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitReply, error)
}

type healthCheckClient struct {
	cc *grpc.ClientConn
}

func NewHealthCheckClient(cc *grpc.ClientConn) HealthCheckClient {
	return &healthCheckClient{cc}
}

func (c *healthCheckClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/cruxgen.HealthCheck/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckClient) Heartbeats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeartbeatsResponse, error) {
	out := new(HeartbeatsResponse)
	err := c.cc.Invoke(ctx, "/cruxgen.HealthCheck/Heartbeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckClient) AbsorbBeats(ctx context.Context, in *HeartbeatsResponse, opts ...grpc.CallOption) (*AbsorbResponse, error) {
	out := new(AbsorbResponse)
	err := c.cc.Invoke(ctx, "/cruxgen.HealthCheck/AbsorbBeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckClient) PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := c.cc.Invoke(ctx, "/cruxgen.HealthCheck/PingTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckClient) Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitReply, error) {
	out := new(QuitReply)
	err := c.cc.Invoke(ctx, "/cruxgen.HealthCheck/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckServer is the server API for HealthCheck service.
type HealthCheckServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Heartbeats(context.Context, *Empty) (*HeartbeatsResponse, error)
	AbsorbBeats(context.Context, *HeartbeatsResponse) (*AbsorbResponse, error)
	PingTest(context.Context, *Ping) (*Ping, error)
	Quit(context.Context, *QuitReq) (*QuitReply, error)
}

func RegisterHealthCheckServer(s *grpc.Server, srv HealthCheckServer) {
	s.RegisterService(&_HealthCheck_serviceDesc, srv)
}

func _HealthCheck_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.HealthCheck/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheck_Heartbeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).Heartbeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.HealthCheck/Heartbeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).Heartbeats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheck_AbsorbBeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatsResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).AbsorbBeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.HealthCheck/AbsorbBeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).AbsorbBeats(ctx, req.(*HeartbeatsResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheck_PingTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).PingTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.HealthCheck/PingTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).PingTest(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheck_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.HealthCheck/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).Quit(ctx, req.(*QuitReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cruxgen.HealthCheck",
	HandlerType: (*HealthCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _HealthCheck_Check_Handler,
		},
		{
			MethodName: "Heartbeats",
			Handler:    _HealthCheck_Heartbeats_Handler,
		},
		{
			MethodName: "AbsorbBeats",
			Handler:    _HealthCheck_AbsorbBeats_Handler,
		},
		{
			MethodName: "PingTest",
			Handler:    _HealthCheck_PingTest_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _HealthCheck_Quit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv_healthcheck.proto",
}
