// Code generated by protoc-gen-go. DO NOT EDIT.
// source: khan.proto

package cruxgen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KhanSpec struct {
	Prog                 string   `protobuf:"bytes,1,opt,name=prog,proto3" json:"prog,omitempty"`
	Err                  *Err     `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KhanSpec) Reset()         { *m = KhanSpec{} }
func (m *KhanSpec) String() string { return proto.CompactTextString(m) }
func (*KhanSpec) ProtoMessage()    {}
func (*KhanSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7a9c89594711620, []int{0}
}

func (m *KhanSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KhanSpec.Unmarshal(m, b)
}
func (m *KhanSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KhanSpec.Marshal(b, m, deterministic)
}
func (m *KhanSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KhanSpec.Merge(m, src)
}
func (m *KhanSpec) XXX_Size() int {
	return xxx_messageInfo_KhanSpec.Size(m)
}
func (m *KhanSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KhanSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KhanSpec proto.InternalMessageInfo

func (m *KhanSpec) GetProg() string {
	if m != nil {
		return m.Prog
	}
	return ""
}

func (m *KhanSpec) GetErr() *Err {
	if m != nil {
		return m.Err
	}
	return nil
}

type KhanResponse struct {
	Err                  *Err     `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KhanResponse) Reset()         { *m = KhanResponse{} }
func (m *KhanResponse) String() string { return proto.CompactTextString(m) }
func (*KhanResponse) ProtoMessage()    {}
func (*KhanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7a9c89594711620, []int{1}
}

func (m *KhanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KhanResponse.Unmarshal(m, b)
}
func (m *KhanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KhanResponse.Marshal(b, m, deterministic)
}
func (m *KhanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KhanResponse.Merge(m, src)
}
func (m *KhanResponse) XXX_Size() int {
	return xxx_messageInfo_KhanResponse.Size(m)
}
func (m *KhanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KhanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KhanResponse proto.InternalMessageInfo

func (m *KhanResponse) GetErr() *Err {
	if m != nil {
		return m.Err
	}
	return nil
}

func init() {
	proto.RegisterType((*KhanSpec)(nil), "cruxgen.KhanSpec")
	proto.RegisterType((*KhanResponse)(nil), "cruxgen.KhanResponse")
}

func init() { proto.RegisterFile("khan.proto", fileDescriptor_f7a9c89594711620) }

var fileDescriptor_f7a9c89594711620 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xce, 0x48, 0xcc,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x2e, 0x2a, 0xad, 0x48, 0x4f, 0xcd, 0x93,
	0xe2, 0x4c, 0x2d, 0x2a, 0x82, 0x88, 0x29, 0xd9, 0x71, 0x71, 0x78, 0x67, 0x24, 0xe6, 0x05, 0x17,
	0xa4, 0x26, 0x0b, 0x09, 0x71, 0xb1, 0x14, 0x14, 0xe5, 0xa7, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x81, 0xd9, 0x42, 0x72, 0x5c, 0xcc, 0xa9, 0x45, 0x45, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xdc,
	0x46, 0x3c, 0x7a, 0x50, 0x13, 0xf4, 0x5c, 0x8b, 0x8a, 0x82, 0x40, 0x12, 0x4a, 0x7a, 0x5c, 0x3c,
	0x20, 0xfd, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x30, 0xf5, 0x8c, 0x38, 0xd4, 0x27,
	0xb1, 0x81, 0xad, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x79, 0x7a, 0xdc, 0x55, 0x98, 0x00,
	0x00, 0x00,
}
