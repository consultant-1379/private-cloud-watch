// Code generated by protoc-gen-go. DO NOT EDIT.
// source: srv_reeve.proto

package cruxgen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ack int32

const (
	Ack_UNK1    Ack = 0
	Ack_WORKING Ack = 1
	Ack_DONE    Ack = 2
	Ack_FAIL    Ack = 3
)

var Ack_name = map[int32]string{
	0: "UNK1",
	1: "WORKING",
	2: "DONE",
	3: "FAIL",
}

var Ack_value = map[string]int32{
	"UNK1":    0,
	"WORKING": 1,
	"DONE":    2,
	"FAIL":    3,
}

func (x Ack) String() string {
	return proto.EnumName(Ack_name, int32(x))
}

func (Ack) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{0}
}

type KeyStatus int32

const (
	KeyStatus_UNK2       KeyStatus = 0
	KeyStatus_CURRENT    KeyStatus = 1
	KeyStatus_DEPRECATED KeyStatus = 2
	KeyStatus_KILLED     KeyStatus = 3
)

var KeyStatus_name = map[int32]string{
	0: "UNK2",
	1: "CURRENT",
	2: "DEPRECATED",
	3: "KILLED",
}

var KeyStatus_value = map[string]int32{
	"UNK2":       0,
	"CURRENT":    1,
	"DEPRECATED": 2,
	"KILLED":     3,
}

func (x KeyStatus) String() string {
	return proto.EnumName(KeyStatus_name, int32(x))
}

func (KeyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{1}
}

type EndpointInfo struct {
	Tscreated            string       `protobuf:"bytes,1,opt,name=tscreated,proto3" json:"tscreated,omitempty"`
	Tsmessage            string       `protobuf:"bytes,2,opt,name=tsmessage,proto3" json:"tsmessage,omitempty"`
	Status               ServiceState `protobuf:"varint,3,opt,name=status,proto3,enum=cruxgen.ServiceState" json:"status,omitempty"`
	Nodeid               string       `protobuf:"bytes,4,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Netid                string       `protobuf:"bytes,5,opt,name=netid,proto3" json:"netid,omitempty"`
	Filename             string       `protobuf:"bytes,6,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EndpointInfo) Reset()         { *m = EndpointInfo{} }
func (m *EndpointInfo) String() string { return proto.CompactTextString(m) }
func (*EndpointInfo) ProtoMessage()    {}
func (*EndpointInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{0}
}

func (m *EndpointInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndpointInfo.Unmarshal(m, b)
}
func (m *EndpointInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndpointInfo.Marshal(b, m, deterministic)
}
func (m *EndpointInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointInfo.Merge(m, src)
}
func (m *EndpointInfo) XXX_Size() int {
	return xxx_messageInfo_EndpointInfo.Size(m)
}
func (m *EndpointInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointInfo proto.InternalMessageInfo

func (m *EndpointInfo) GetTscreated() string {
	if m != nil {
		return m.Tscreated
	}
	return ""
}

func (m *EndpointInfo) GetTsmessage() string {
	if m != nil {
		return m.Tsmessage
	}
	return ""
}

func (m *EndpointInfo) GetStatus() ServiceState {
	if m != nil {
		return m.Status
	}
	return ServiceState_UNK0
}

func (m *EndpointInfo) GetNodeid() string {
	if m != nil {
		return m.Nodeid
	}
	return ""
}

func (m *EndpointInfo) GetNetid() string {
	if m != nil {
		return m.Netid
	}
	return ""
}

func (m *EndpointInfo) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type Acknowledgement struct {
	Localuuid            string   `protobuf:"bytes,1,opt,name=localuuid,proto3" json:"localuuid,omitempty"`
	Remoteuuid           string   `protobuf:"bytes,2,opt,name=remoteuuid,proto3" json:"remoteuuid,omitempty"`
	State                int32    `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	Ack                  Ack      `protobuf:"varint,4,opt,name=ack,proto3,enum=cruxgen.Ack" json:"ack,omitempty"`
	Ts                   string   `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
	Error                string   `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acknowledgement) Reset()         { *m = Acknowledgement{} }
func (m *Acknowledgement) String() string { return proto.CompactTextString(m) }
func (*Acknowledgement) ProtoMessage()    {}
func (*Acknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{1}
}

func (m *Acknowledgement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acknowledgement.Unmarshal(m, b)
}
func (m *Acknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acknowledgement.Marshal(b, m, deterministic)
}
func (m *Acknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acknowledgement.Merge(m, src)
}
func (m *Acknowledgement) XXX_Size() int {
	return xxx_messageInfo_Acknowledgement.Size(m)
}
func (m *Acknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_Acknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_Acknowledgement proto.InternalMessageInfo

func (m *Acknowledgement) GetLocaluuid() string {
	if m != nil {
		return m.Localuuid
	}
	return ""
}

func (m *Acknowledgement) GetRemoteuuid() string {
	if m != nil {
		return m.Remoteuuid
	}
	return ""
}

func (m *Acknowledgement) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Acknowledgement) GetAck() Ack {
	if m != nil {
		return m.Ack
	}
	return Ack_UNK1
}

func (m *Acknowledgement) GetTs() string {
	if m != nil {
		return m.Ts
	}
	return ""
}

func (m *Acknowledgement) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ClientInfo struct {
	Nodeid               string    `protobuf:"bytes,1,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Keyid                string    `protobuf:"bytes,2,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Keyjson              string    `protobuf:"bytes,3,opt,name=keyjson,proto3" json:"keyjson,omitempty"`
	Status               KeyStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cruxgen.KeyStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{2}
}

func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientInfo.Unmarshal(m, b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
}
func (m *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(m, src)
}
func (m *ClientInfo) XXX_Size() int {
	return xxx_messageInfo_ClientInfo.Size(m)
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetNodeid() string {
	if m != nil {
		return m.Nodeid
	}
	return ""
}

func (m *ClientInfo) GetKeyid() string {
	if m != nil {
		return m.Keyid
	}
	return ""
}

func (m *ClientInfo) GetKeyjson() string {
	if m != nil {
		return m.Keyjson
	}
	return ""
}

func (m *ClientInfo) GetStatus() KeyStatus {
	if m != nil {
		return m.Status
	}
	return KeyStatus_UNK2
}

type EndpointRequest struct {
	Nodeid               string   `protobuf:"bytes,1,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Keyid                string   `protobuf:"bytes,2,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndpointRequest) Reset()         { *m = EndpointRequest{} }
func (m *EndpointRequest) String() string { return proto.CompactTextString(m) }
func (*EndpointRequest) ProtoMessage()    {}
func (*EndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{3}
}

func (m *EndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndpointRequest.Unmarshal(m, b)
}
func (m *EndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndpointRequest.Marshal(b, m, deterministic)
}
func (m *EndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointRequest.Merge(m, src)
}
func (m *EndpointRequest) XXX_Size() int {
	return xxx_messageInfo_EndpointRequest.Size(m)
}
func (m *EndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointRequest proto.InternalMessageInfo

func (m *EndpointRequest) GetNodeid() string {
	if m != nil {
		return m.Nodeid
	}
	return ""
}

func (m *EndpointRequest) GetKeyid() string {
	if m != nil {
		return m.Keyid
	}
	return ""
}

func (m *EndpointRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type EpInfo struct {
	Nodeid               string   `protobuf:"bytes,1,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Netid                string   `protobuf:"bytes,2,opt,name=netid,proto3" json:"netid,omitempty"`
	Priority             string   `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Rank                 int32    `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EpInfo) Reset()         { *m = EpInfo{} }
func (m *EpInfo) String() string { return proto.CompactTextString(m) }
func (*EpInfo) ProtoMessage()    {}
func (*EpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{4}
}

func (m *EpInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EpInfo.Unmarshal(m, b)
}
func (m *EpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EpInfo.Marshal(b, m, deterministic)
}
func (m *EpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpInfo.Merge(m, src)
}
func (m *EpInfo) XXX_Size() int {
	return xxx_messageInfo_EpInfo.Size(m)
}
func (m *EpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EpInfo proto.InternalMessageInfo

func (m *EpInfo) GetNodeid() string {
	if m != nil {
		return m.Nodeid
	}
	return ""
}

func (m *EpInfo) GetNetid() string {
	if m != nil {
		return m.Netid
	}
	return ""
}

func (m *EpInfo) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func (m *EpInfo) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type Endpoints struct {
	List                 []*EpInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Error                string    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Endpoints) Reset()         { *m = Endpoints{} }
func (m *Endpoints) String() string { return proto.CompactTextString(m) }
func (*Endpoints) ProtoMessage()    {}
func (*Endpoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{5}
}

func (m *Endpoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Endpoints.Unmarshal(m, b)
}
func (m *Endpoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Endpoints.Marshal(b, m, deterministic)
}
func (m *Endpoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endpoints.Merge(m, src)
}
func (m *Endpoints) XXX_Size() int {
	return xxx_messageInfo_Endpoints.Size(m)
}
func (m *Endpoints) XXX_DiscardUnknown() {
	xxx_messageInfo_Endpoints.DiscardUnknown(m)
}

var xxx_messageInfo_Endpoints proto.InternalMessageInfo

func (m *Endpoints) GetList() []*EpInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *Endpoints) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Catalog() Args - USE to get a catalogue of services in flock/horde available
// to the grpcsignatures client specified by parameters.
type CatalogRequest struct {
	Nodeid               string   `protobuf:"bytes,1,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Keyid                string   `protobuf:"bytes,2,opt,name=keyid,proto3" json:"keyid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CatalogRequest) Reset()         { *m = CatalogRequest{} }
func (m *CatalogRequest) String() string { return proto.CompactTextString(m) }
func (*CatalogRequest) ProtoMessage()    {}
func (*CatalogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{6}
}

func (m *CatalogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatalogRequest.Unmarshal(m, b)
}
func (m *CatalogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatalogRequest.Marshal(b, m, deterministic)
}
func (m *CatalogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogRequest.Merge(m, src)
}
func (m *CatalogRequest) XXX_Size() int {
	return xxx_messageInfo_CatalogRequest.Size(m)
}
func (m *CatalogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogRequest proto.InternalMessageInfo

func (m *CatalogRequest) GetNodeid() string {
	if m != nil {
		return m.Nodeid
	}
	return ""
}

func (m *CatalogRequest) GetKeyid() string {
	if m != nil {
		return m.Keyid
	}
	return ""
}

// CatalogInfo provides service information + 1 reachable, operating, instance of service.
// nodeid - broken into blocname, hordename, servicname fulfils generic elements
// of the request.  netid - provides the operating instance of servicerev. filename
// provides the plugin information for the servicerev.
type CatalogInfo struct {
	Nodeid               string   `protobuf:"bytes,1,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Netid                string   `protobuf:"bytes,2,opt,name=netid,proto3" json:"netid,omitempty"`
	Filename             string   `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CatalogInfo) Reset()         { *m = CatalogInfo{} }
func (m *CatalogInfo) String() string { return proto.CompactTextString(m) }
func (*CatalogInfo) ProtoMessage()    {}
func (*CatalogInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{7}
}

func (m *CatalogInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatalogInfo.Unmarshal(m, b)
}
func (m *CatalogInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatalogInfo.Marshal(b, m, deterministic)
}
func (m *CatalogInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogInfo.Merge(m, src)
}
func (m *CatalogInfo) XXX_Size() int {
	return xxx_messageInfo_CatalogInfo.Size(m)
}
func (m *CatalogInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogInfo proto.InternalMessageInfo

func (m *CatalogInfo) GetNodeid() string {
	if m != nil {
		return m.Nodeid
	}
	return ""
}

func (m *CatalogInfo) GetNetid() string {
	if m != nil {
		return m.Netid
	}
	return ""
}

func (m *CatalogInfo) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type CatalogReply struct {
	List                 []*CatalogInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Error                string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CatalogReply) Reset()         { *m = CatalogReply{} }
func (m *CatalogReply) String() string { return proto.CompactTextString(m) }
func (*CatalogReply) ProtoMessage()    {}
func (*CatalogReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{8}
}

func (m *CatalogReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatalogReply.Unmarshal(m, b)
}
func (m *CatalogReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatalogReply.Marshal(b, m, deterministic)
}
func (m *CatalogReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogReply.Merge(m, src)
}
func (m *CatalogReply) XXX_Size() int {
	return xxx_messageInfo_CatalogReply.Size(m)
}
func (m *CatalogReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogReply.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogReply proto.InternalMessageInfo

func (m *CatalogReply) GetList() []*CatalogInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CatalogReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RuleInfo struct {
	Rule                 string   `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	Horde                string   `protobuf:"bytes,2,opt,name=horde,proto3" json:"horde,omitempty"`
	From                 string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To                   string   `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Owner                string   `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuleInfo) Reset()         { *m = RuleInfo{} }
func (m *RuleInfo) String() string { return proto.CompactTextString(m) }
func (*RuleInfo) ProtoMessage()    {}
func (*RuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{9}
}

func (m *RuleInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleInfo.Unmarshal(m, b)
}
func (m *RuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleInfo.Marshal(b, m, deterministic)
}
func (m *RuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleInfo.Merge(m, src)
}
func (m *RuleInfo) XXX_Size() int {
	return xxx_messageInfo_RuleInfo.Size(m)
}
func (m *RuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RuleInfo proto.InternalMessageInfo

func (m *RuleInfo) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *RuleInfo) GetHorde() string {
	if m != nil {
		return m.Horde
	}
	return ""
}

func (m *RuleInfo) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RuleInfo) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *RuleInfo) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type CatalogList struct {
	List                 []*CatalogInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Allowed              []*RuleInfo    `protobuf:"bytes,2,rep,name=allowed,proto3" json:"allowed,omitempty"`
	State                int32          `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CatalogList) Reset()         { *m = CatalogList{} }
func (m *CatalogList) String() string { return proto.CompactTextString(m) }
func (*CatalogList) ProtoMessage()    {}
func (*CatalogList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{10}
}

func (m *CatalogList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatalogList.Unmarshal(m, b)
}
func (m *CatalogList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatalogList.Marshal(b, m, deterministic)
}
func (m *CatalogList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogList.Merge(m, src)
}
func (m *CatalogList) XXX_Size() int {
	return xxx_messageInfo_CatalogList.Size(m)
}
func (m *CatalogList) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogList.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogList proto.InternalMessageInfo

func (m *CatalogList) GetList() []*CatalogInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CatalogList) GetAllowed() []*RuleInfo {
	if m != nil {
		return m.Allowed
	}
	return nil
}

func (m *CatalogList) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type SignWith struct {
	Keyid                string   `protobuf:"bytes,1,opt,name=keyid,proto3" json:"keyid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignWith) Reset()         { *m = SignWith{} }
func (m *SignWith) String() string { return proto.CompactTextString(m) }
func (*SignWith) ProtoMessage()    {}
func (*SignWith) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{11}
}

func (m *SignWith) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignWith.Unmarshal(m, b)
}
func (m *SignWith) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignWith.Marshal(b, m, deterministic)
}
func (m *SignWith) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignWith.Merge(m, src)
}
func (m *SignWith) XXX_Size() int {
	return xxx_messageInfo_SignWith.Size(m)
}
func (m *SignWith) XXX_DiscardUnknown() {
	xxx_messageInfo_SignWith.DiscardUnknown(m)
}

var xxx_messageInfo_SignWith proto.InternalMessageInfo

func (m *SignWith) GetKeyid() string {
	if m != nil {
		return m.Keyid
	}
	return ""
}

type PubKeysUpdate struct {
	Keyid                string   `protobuf:"bytes,1,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Date                 string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Signature            string   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Current              string   `protobuf:"bytes,4,opt,name=current,proto3" json:"current,omitempty"`
	Deprecated           string   `protobuf:"bytes,5,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	Killed               string   `protobuf:"bytes,6,opt,name=killed,proto3" json:"killed,omitempty"`
	Error                string   `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubKeysUpdate) Reset()         { *m = PubKeysUpdate{} }
func (m *PubKeysUpdate) String() string { return proto.CompactTextString(m) }
func (*PubKeysUpdate) ProtoMessage()    {}
func (*PubKeysUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{12}
}

func (m *PubKeysUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubKeysUpdate.Unmarshal(m, b)
}
func (m *PubKeysUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubKeysUpdate.Marshal(b, m, deterministic)
}
func (m *PubKeysUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeysUpdate.Merge(m, src)
}
func (m *PubKeysUpdate) XXX_Size() int {
	return xxx_messageInfo_PubKeysUpdate.Size(m)
}
func (m *PubKeysUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeysUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeysUpdate proto.InternalMessageInfo

func (m *PubKeysUpdate) GetKeyid() string {
	if m != nil {
		return m.Keyid
	}
	return ""
}

func (m *PubKeysUpdate) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *PubKeysUpdate) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *PubKeysUpdate) GetCurrent() string {
	if m != nil {
		return m.Current
	}
	return ""
}

func (m *PubKeysUpdate) GetDeprecated() string {
	if m != nil {
		return m.Deprecated
	}
	return ""
}

func (m *PubKeysUpdate) GetKilled() string {
	if m != nil {
		return m.Killed
	}
	return ""
}

func (m *PubKeysUpdate) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type StateId struct {
	State                int32    `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateId) Reset()         { *m = StateId{} }
func (m *StateId) String() string { return proto.CompactTextString(m) }
func (*StateId) ProtoMessage()    {}
func (*StateId) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{13}
}

func (m *StateId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateId.Unmarshal(m, b)
}
func (m *StateId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateId.Marshal(b, m, deterministic)
}
func (m *StateId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateId.Merge(m, src)
}
func (m *StateId) XXX_Size() int {
	return xxx_messageInfo_StateId.Size(m)
}
func (m *StateId) XXX_DiscardUnknown() {
	xxx_messageInfo_StateId.DiscardUnknown(m)
}

var xxx_messageInfo_StateId proto.InternalMessageInfo

func (m *StateId) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type WlPubKey struct {
	Json                 string   `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WlPubKey) Reset()         { *m = WlPubKey{} }
func (m *WlPubKey) String() string { return proto.CompactTextString(m) }
func (*WlPubKey) ProtoMessage()    {}
func (*WlPubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{14}
}

func (m *WlPubKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WlPubKey.Unmarshal(m, b)
}
func (m *WlPubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WlPubKey.Marshal(b, m, deterministic)
}
func (m *WlPubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlPubKey.Merge(m, src)
}
func (m *WlPubKey) XXX_Size() int {
	return xxx_messageInfo_WlPubKey.Size(m)
}
func (m *WlPubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_WlPubKey.DiscardUnknown(m)
}

var xxx_messageInfo_WlPubKey proto.InternalMessageInfo

func (m *WlPubKey) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

type WlList struct {
	State                int32       `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Add                  []*WlPubKey `protobuf:"bytes,2,rep,name=add,proto3" json:"add,omitempty"`
	Del                  []*WlPubKey `protobuf:"bytes,3,rep,name=del,proto3" json:"del,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WlList) Reset()         { *m = WlList{} }
func (m *WlList) String() string { return proto.CompactTextString(m) }
func (*WlList) ProtoMessage()    {}
func (*WlList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{15}
}

func (m *WlList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WlList.Unmarshal(m, b)
}
func (m *WlList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WlList.Marshal(b, m, deterministic)
}
func (m *WlList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WlList.Merge(m, src)
}
func (m *WlList) XXX_Size() int {
	return xxx_messageInfo_WlList.Size(m)
}
func (m *WlList) XXX_DiscardUnknown() {
	xxx_messageInfo_WlList.DiscardUnknown(m)
}

var xxx_messageInfo_WlList proto.InternalMessageInfo

func (m *WlList) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *WlList) GetAdd() []*WlPubKey {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *WlList) GetDel() []*WlPubKey {
	if m != nil {
		return m.Del
	}
	return nil
}

type EpList struct {
	State                int32     `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Add                  []*EpInfo `protobuf:"bytes,2,rep,name=add,proto3" json:"add,omitempty"`
	Del                  []*EpInfo `protobuf:"bytes,3,rep,name=del,proto3" json:"del,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EpList) Reset()         { *m = EpList{} }
func (m *EpList) String() string { return proto.CompactTextString(m) }
func (*EpList) ProtoMessage()    {}
func (*EpList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d67facad65b53ba, []int{16}
}

func (m *EpList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EpList.Unmarshal(m, b)
}
func (m *EpList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EpList.Marshal(b, m, deterministic)
}
func (m *EpList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpList.Merge(m, src)
}
func (m *EpList) XXX_Size() int {
	return xxx_messageInfo_EpList.Size(m)
}
func (m *EpList) XXX_DiscardUnknown() {
	xxx_messageInfo_EpList.DiscardUnknown(m)
}

var xxx_messageInfo_EpList proto.InternalMessageInfo

func (m *EpList) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *EpList) GetAdd() []*EpInfo {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *EpList) GetDel() []*EpInfo {
	if m != nil {
		return m.Del
	}
	return nil
}

func init() {
	proto.RegisterEnum("cruxgen.Ack", Ack_name, Ack_value)
	proto.RegisterEnum("cruxgen.KeyStatus", KeyStatus_name, KeyStatus_value)
	proto.RegisterType((*EndpointInfo)(nil), "cruxgen.EndpointInfo")
	proto.RegisterType((*Acknowledgement)(nil), "cruxgen.Acknowledgement")
	proto.RegisterType((*ClientInfo)(nil), "cruxgen.ClientInfo")
	proto.RegisterType((*EndpointRequest)(nil), "cruxgen.EndpointRequest")
	proto.RegisterType((*EpInfo)(nil), "cruxgen.EpInfo")
	proto.RegisterType((*Endpoints)(nil), "cruxgen.Endpoints")
	proto.RegisterType((*CatalogRequest)(nil), "cruxgen.CatalogRequest")
	proto.RegisterType((*CatalogInfo)(nil), "cruxgen.CatalogInfo")
	proto.RegisterType((*CatalogReply)(nil), "cruxgen.CatalogReply")
	proto.RegisterType((*RuleInfo)(nil), "cruxgen.RuleInfo")
	proto.RegisterType((*CatalogList)(nil), "cruxgen.CatalogList")
	proto.RegisterType((*SignWith)(nil), "cruxgen.SignWith")
	proto.RegisterType((*PubKeysUpdate)(nil), "cruxgen.PubKeysUpdate")
	proto.RegisterType((*StateId)(nil), "cruxgen.StateId")
	proto.RegisterType((*WlPubKey)(nil), "cruxgen.WlPubKey")
	proto.RegisterType((*WlList)(nil), "cruxgen.WlList")
	proto.RegisterType((*EpList)(nil), "cruxgen.EpList")
}

func init() { proto.RegisterFile("srv_reeve.proto", fileDescriptor_2d67facad65b53ba) }

var fileDescriptor_2d67facad65b53ba = []byte{
	// 1022 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x25, 0xeb, 0x6f, 0x1c, 0x4b, 0xea, 0xd6, 0x49, 0x08, 0xa1, 0x70, 0x1d, 0xe6, 0x62,
	0xb8, 0xa8, 0xd1, 0xba, 0x07, 0x1f, 0xda, 0x04, 0x10, 0x6c, 0xa6, 0x35, 0x6c, 0x28, 0x06, 0x6d,
	0x41, 0xc7, 0x82, 0x26, 0xc7, 0x32, 0xab, 0x15, 0xc9, 0x2c, 0x97, 0x76, 0xd5, 0x53, 0xdf, 0xa7,
	0x0f, 0xd1, 0x43, 0x9f, 0xa3, 0xef, 0x52, 0xec, 0x1f, 0xc9, 0x58, 0xae, 0xd2, 0xfa, 0xc6, 0x99,
	0xd9, 0xd9, 0xfd, 0xe6, 0x9b, 0x9d, 0x6f, 0x09, 0xfd, 0x8c, 0xdd, 0xfd, 0xcc, 0x10, 0xef, 0xf0,
	0x20, 0x65, 0x09, 0x4f, 0x48, 0x3b, 0x60, 0xf9, 0xaf, 0x33, 0x8c, 0x87, 0x90, 0x46, 0xf1, 0x4c,
	0x39, 0x87, 0xfd, 0x5b, 0xf4, 0x19, 0xbf, 0x46, 0x9f, 0x2b, 0x87, 0xf3, 0x97, 0x05, 0xcf, 0xdc,
	0x38, 0x4c, 0x93, 0x28, 0xe6, 0xa7, 0xf1, 0x4d, 0x42, 0xbe, 0x80, 0x2e, 0xcf, 0x02, 0x86, 0x3e,
	0xc7, 0xd0, 0xb6, 0x76, 0xad, 0xbd, 0xae, 0x57, 0x3a, 0x54, 0x74, 0x81, 0x59, 0xe6, 0xcf, 0xd0,
	0xae, 0x9b, 0xa8, 0x76, 0x90, 0xaf, 0xa1, 0x95, 0x71, 0x9f, 0xe7, 0x99, 0xdd, 0xd8, 0xb5, 0xf6,
	0x7a, 0x87, 0xcf, 0x0f, 0x34, 0x86, 0x83, 0x4b, 0x64, 0x77, 0x51, 0x80, 0x97, 0xdc, 0xe7, 0xe8,
	0xe9, 0x45, 0xe4, 0x05, 0xb4, 0xe2, 0x24, 0xc4, 0x28, 0xb4, 0x37, 0xe4, 0x4e, 0xda, 0x22, 0xdb,
	0xd0, 0x8c, 0x91, 0x47, 0xa1, 0xdd, 0x94, 0x6e, 0x65, 0x90, 0x21, 0x74, 0x6e, 0x22, 0x8a, 0xb1,
	0xbf, 0x40, 0xbb, 0x25, 0x03, 0x85, 0xed, 0xfc, 0x61, 0x41, 0x7f, 0x14, 0xcc, 0xe3, 0xe4, 0x9e,
	0x62, 0x38, 0xc3, 0x05, 0xc6, 0x5c, 0x40, 0xa5, 0x49, 0xe0, 0xd3, 0x3c, 0x8f, 0x8a, 0x42, 0x0a,
	0x07, 0xd9, 0x01, 0x60, 0xb8, 0x48, 0x38, 0xca, 0xb0, 0xaa, 0xa4, 0xe2, 0x11, 0x18, 0x04, 0x4a,
	0x94, 0x95, 0x34, 0x3d, 0x65, 0x90, 0x1d, 0x68, 0xf8, 0xc1, 0x5c, 0xc2, 0xed, 0x1d, 0x3e, 0x2b,
	0xaa, 0x1b, 0x05, 0x73, 0x4f, 0x04, 0x48, 0x0f, 0xea, 0x3c, 0xd3, 0xb0, 0xeb, 0x3c, 0x13, 0xbb,
	0x20, 0x63, 0x09, 0xd3, 0x80, 0x95, 0xe1, 0xfc, 0x6e, 0x01, 0x1c, 0xd3, 0x08, 0x35, 0xe3, 0x25,
	0x0d, 0xd6, 0x43, 0x1a, 0xe6, 0xb8, 0x2c, 0xd0, 0x29, 0x83, 0xd8, 0xd0, 0x9e, 0xe3, 0xf2, 0x97,
	0x2c, 0x89, 0x25, 0xb4, 0xae, 0x67, 0x4c, 0xb2, 0x5f, 0xb0, 0xaf, 0xf0, 0x91, 0x02, 0xdf, 0x19,
	0x2e, 0x2f, 0x65, 0xc4, 0x50, 0xef, 0x4c, 0xa0, 0x6f, 0xba, 0xee, 0xe1, 0x87, 0x1c, 0x33, 0xfe,
	0x3f, 0x61, 0x6c, 0x43, 0x93, 0x46, 0x8b, 0x88, 0x1b, 0x7e, 0xa4, 0xe1, 0xdc, 0x40, 0xcb, 0x4d,
	0x3f, 0x55, 0x94, 0xea, 0x6d, 0xfd, 0x41, 0x6f, 0x53, 0x16, 0x25, 0x2c, 0xe2, 0x4b, 0x5d, 0x55,
	0x61, 0x13, 0x02, 0x1b, 0xcc, 0x8f, 0x15, 0xe9, 0x4d, 0x4f, 0x7e, 0x3b, 0xef, 0xa0, 0x6b, 0xe0,
	0x67, 0xe4, 0x35, 0x6c, 0xd0, 0x28, 0xe3, 0xb6, 0xb5, 0xdb, 0xd8, 0xdb, 0x3c, 0xec, 0x17, 0x55,
	0x2b, 0x24, 0x9e, 0x0c, 0x96, 0x9d, 0xa8, 0x57, 0x3b, 0xf1, 0x16, 0x7a, 0xc7, 0x3e, 0xf7, 0x69,
	0x32, 0x7b, 0x12, 0x0b, 0xce, 0x14, 0x36, 0x75, 0xfe, 0xd3, 0x8a, 0x2e, 0x2e, 0x74, 0xe3, 0xc1,
	0x85, 0x1e, 0xc3, 0xb3, 0x02, 0x58, 0x4a, 0x97, 0x64, 0xef, 0xa3, 0x1a, 0xb7, 0x8b, 0x1a, 0x2b,
	0xa7, 0xaf, 0x2d, 0x34, 0x86, 0x8e, 0x97, 0x53, 0x94, 0x28, 0x05, 0xa1, 0x39, 0x45, 0x8d, 0x51,
	0x7e, 0x8b, 0xac, 0xdb, 0x84, 0x85, 0x66, 0xa6, 0x95, 0x21, 0x56, 0xde, 0xb0, 0x64, 0xa1, 0xd1,
	0xc9, 0x6f, 0x79, 0xc5, 0x13, 0x3d, 0xb0, 0x75, 0x9e, 0x88, 0xcc, 0xe4, 0x3e, 0x46, 0x66, 0x86,
	0x55, 0x1a, 0xce, 0x6f, 0x05, 0x31, 0xe7, 0x02, 0xd4, 0x7f, 0x87, 0xff, 0x15, 0xb4, 0x7d, 0x4a,
	0x93, 0x7b, 0x14, 0x64, 0x89, 0xc5, 0x9f, 0x15, 0x8b, 0x4d, 0x01, 0x9e, 0x59, 0xf1, 0xf8, 0x90,
	0x3a, 0xbb, 0xd0, 0xb9, 0x8c, 0x66, 0xf1, 0x34, 0xe2, 0xb7, 0x65, 0xdb, 0xac, 0x6a, 0xdb, 0xfe,
	0xb4, 0x60, 0xeb, 0x22, 0xbf, 0x3e, 0xc3, 0x65, 0x36, 0x49, 0x43, 0x31, 0xd8, 0x8f, 0xae, 0x13,
	0xf5, 0x8b, 0xa8, 0x26, 0x45, 0x7e, 0x0b, 0x59, 0xc9, 0xa2, 0x59, 0xec, 0xf3, 0x9c, 0x99, 0xb6,
	0x95, 0x0e, 0x31, 0x9d, 0x41, 0xce, 0x18, 0xc6, 0x5c, 0x53, 0x64, 0x4c, 0x21, 0x38, 0x21, 0xa6,
	0x0c, 0x03, 0x29, 0xac, 0x8a, 0xac, 0x8a, 0x47, 0xdc, 0x9d, 0x79, 0x44, 0x29, 0x86, 0x5a, 0x2b,
	0xb4, 0x55, 0xf6, 0xb3, 0x5d, 0xed, 0xe7, 0x97, 0xd0, 0x96, 0x5a, 0x7a, 0x5a, 0x21, 0xc1, 0xaa,
	0x92, 0xb0, 0x03, 0x9d, 0x29, 0x55, 0x35, 0x8a, 0x32, 0xa4, 0x5e, 0xe8, 0x86, 0x8b, 0x6f, 0xe7,
	0x16, 0x5a, 0x53, 0x7a, 0xae, 0x2f, 0xcc, 0x6a, 0x3e, 0x79, 0x0d, 0x0d, 0x3f, 0x5c, 0xed, 0x81,
	0xd9, 0xd3, 0x13, 0x51, 0xb1, 0x28, 0x44, 0x6a, 0x37, 0xfe, 0x75, 0x51, 0x88, 0xd4, 0x09, 0x85,
	0x26, 0xac, 0x39, 0xe9, 0x55, 0xf5, 0xa4, 0x95, 0xe9, 0x95, 0xe7, 0xbc, 0xaa, 0x9e, 0xb3, 0xba,
	0x24, 0x44, 0xba, 0xff, 0x0d, 0x34, 0x46, 0xc1, 0x9c, 0x74, 0x60, 0x63, 0x32, 0x3e, 0xfb, 0x76,
	0x50, 0x23, 0x9b, 0xd0, 0x9e, 0xbe, 0xf7, 0xce, 0x4e, 0xc7, 0x3f, 0x0e, 0x2c, 0xe1, 0x3e, 0x79,
	0x3f, 0x76, 0x07, 0x75, 0xf1, 0xf5, 0x6e, 0x74, 0x7a, 0x3e, 0x68, 0xec, 0xbf, 0x85, 0x6e, 0xa1,
	0x8b, 0x3a, 0xef, 0x50, 0xe5, 0x1d, 0x4f, 0x3c, 0xcf, 0x1d, 0x5f, 0x0d, 0x2c, 0xd2, 0x03, 0x38,
	0x71, 0x2f, 0x3c, 0xf7, 0x78, 0x74, 0xe5, 0x9e, 0x0c, 0xea, 0x04, 0xa0, 0x75, 0x76, 0x7a, 0x7e,
	0xee, 0x9e, 0x0c, 0x1a, 0x87, 0x7f, 0x37, 0xa1, 0xe9, 0x89, 0xf7, 0x96, 0xec, 0x43, 0xe7, 0x22,
	0x8a, 0x67, 0x57, 0x42, 0x3f, 0xb6, 0x0a, 0x74, 0xc2, 0x35, 0xfc, 0xd8, 0x74, 0x6a, 0xe4, 0x0d,
	0x74, 0x7f, 0x32, 0x4f, 0x30, 0x29, 0xdf, 0xc7, 0xc2, 0xe7, 0xe1, 0x87, 0xe1, 0xcb, 0xc7, 0xdc,
	0x29, 0x5d, 0x3a, 0x35, 0xe2, 0xc2, 0xc0, 0xc3, 0x59, 0x94, 0x71, 0x64, 0x46, 0x00, 0x2b, 0xbb,
	0x54, 0x1f, 0xf2, 0xa1, 0x5d, 0x7d, 0x9e, 0xaa, 0x2f, 0xa3, 0x53, 0x23, 0x23, 0xe8, 0x99, 0x6d,
	0xd4, 0x43, 0x44, 0x3e, 0x2f, 0x67, 0xb2, 0x78, 0x99, 0xd6, 0x6e, 0xf1, 0x06, 0x36, 0x0b, 0x09,
	0x9e, 0xa4, 0xc4, 0x5e, 0x01, 0xa1, 0x15, 0x75, 0x48, 0x56, 0x22, 0x99, 0x53, 0x23, 0xdf, 0x43,
	0x5b, 0x0f, 0x3f, 0x79, 0xf9, 0x50, 0x0e, 0x4c, 0xe6, 0xf3, 0xd5, 0x80, 0x62, 0x61, 0x04, 0x5b,
	0x6a, 0x6e, 0xcd, 0x16, 0x2b, 0x8a, 0x22, 0xee, 0xdb, 0x5a, 0xf8, 0x3f, 0x98, 0x2d, 0x2e, 0xf2,
	0xeb, 0x39, 0x2e, 0x33, 0x52, 0x5e, 0x5f, 0x23, 0x1e, 0xc3, 0x17, 0x65, 0xf3, 0xaa, 0x62, 0xe1,
	0xd4, 0xc8, 0x11, 0xb4, 0xa7, 0x54, 0x0e, 0x20, 0x19, 0x94, 0x79, 0x6a, 0x20, 0xd7, 0x1e, 0x7b,
	0x04, 0x6d, 0x37, 0x7d, 0x5a, 0x62, 0x67, 0x4a, 0xb5, 0x58, 0xf5, 0x2b, 0x93, 0xf6, 0xc9, 0x42,
	0x8f, 0xa0, 0xe3, 0xa6, 0x2b, 0x89, 0x6a, 0x22, 0xd7, 0x25, 0x5e, 0xb7, 0xe4, 0x0f, 0xe2, 0x77,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x29, 0x0b, 0xed, 0x1e, 0x59, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReeveClient is the client API for Reeve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReeveClient interface {
	PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error)
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatReply, error)
	RegisterEndpoint(ctx context.Context, in *EndpointInfo, opts ...grpc.CallOption) (*Acknowledgement, error)
	RegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Acknowledgement, error)
	EndpointsUp(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*Endpoints, error)
	Catalog(ctx context.Context, in *CatalogRequest, opts ...grpc.CallOption) (*CatalogReply, error)
	UpdateCatalog(ctx context.Context, in *CatalogList, opts ...grpc.CallOption) (*Acknowledgement, error)
	UpdatePubkeys(ctx context.Context, in *SignWith, opts ...grpc.CallOption) (*PubKeysUpdate, error)
	WlState(ctx context.Context, in *StateId, opts ...grpc.CallOption) (*Acknowledgement, error)
	EpState(ctx context.Context, in *StateId, opts ...grpc.CallOption) (*Acknowledgement, error)
	WlUpdate(ctx context.Context, in *WlList, opts ...grpc.CallOption) (*Acknowledgement, error)
	EpUpdate(ctx context.Context, in *EpList, opts ...grpc.CallOption) (*Acknowledgement, error)
}

type reeveClient struct {
	cc *grpc.ClientConn
}

func NewReeveClient(cc *grpc.ClientConn) ReeveClient {
	return &reeveClient{cc}
}

func (c *reeveClient) PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/PingTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) RegisterEndpoint(ctx context.Context, in *EndpointInfo, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/RegisterEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) RegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/RegisterClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) EndpointsUp(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*Endpoints, error) {
	out := new(Endpoints)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/EndpointsUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) Catalog(ctx context.Context, in *CatalogRequest, opts ...grpc.CallOption) (*CatalogReply, error) {
	out := new(CatalogReply)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) UpdateCatalog(ctx context.Context, in *CatalogList, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/UpdateCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) UpdatePubkeys(ctx context.Context, in *SignWith, opts ...grpc.CallOption) (*PubKeysUpdate, error) {
	out := new(PubKeysUpdate)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/UpdatePubkeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) WlState(ctx context.Context, in *StateId, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/WlState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) EpState(ctx context.Context, in *StateId, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/EpState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) WlUpdate(ctx context.Context, in *WlList, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/WlUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reeveClient) EpUpdate(ctx context.Context, in *EpList, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := c.cc.Invoke(ctx, "/cruxgen.Reeve/EpUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReeveServer is the server API for Reeve service.
type ReeveServer interface {
	PingTest(context.Context, *Ping) (*Ping, error)
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatReply, error)
	RegisterEndpoint(context.Context, *EndpointInfo) (*Acknowledgement, error)
	RegisterClient(context.Context, *ClientInfo) (*Acknowledgement, error)
	EndpointsUp(context.Context, *EndpointRequest) (*Endpoints, error)
	Catalog(context.Context, *CatalogRequest) (*CatalogReply, error)
	UpdateCatalog(context.Context, *CatalogList) (*Acknowledgement, error)
	UpdatePubkeys(context.Context, *SignWith) (*PubKeysUpdate, error)
	WlState(context.Context, *StateId) (*Acknowledgement, error)
	EpState(context.Context, *StateId) (*Acknowledgement, error)
	WlUpdate(context.Context, *WlList) (*Acknowledgement, error)
	EpUpdate(context.Context, *EpList) (*Acknowledgement, error)
}

func RegisterReeveServer(s *grpc.Server, srv ReeveServer) {
	s.RegisterService(&_Reeve_serviceDesc, srv)
}

func _Reeve_PingTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).PingTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/PingTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).PingTest(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_RegisterEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).RegisterEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/RegisterEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).RegisterEndpoint(ctx, req.(*EndpointInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).RegisterClient(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_EndpointsUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).EndpointsUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/EndpointsUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).EndpointsUp(ctx, req.(*EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).Catalog(ctx, req.(*CatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_UpdateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).UpdateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/UpdateCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).UpdateCatalog(ctx, req.(*CatalogList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_UpdatePubkeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignWith)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).UpdatePubkeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/UpdatePubkeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).UpdatePubkeys(ctx, req.(*SignWith))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_WlState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).WlState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/WlState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).WlState(ctx, req.(*StateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_EpState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).EpState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/EpState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).EpState(ctx, req.(*StateId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_WlUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WlList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).WlUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/WlUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).WlUpdate(ctx, req.(*WlList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reeve_EpUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReeveServer).EpUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Reeve/EpUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReeveServer).EpUpdate(ctx, req.(*EpList))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reeve_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cruxgen.Reeve",
	HandlerType: (*ReeveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingTest",
			Handler:    _Reeve_PingTest_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Reeve_Heartbeat_Handler,
		},
		{
			MethodName: "RegisterEndpoint",
			Handler:    _Reeve_RegisterEndpoint_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _Reeve_RegisterClient_Handler,
		},
		{
			MethodName: "EndpointsUp",
			Handler:    _Reeve_EndpointsUp_Handler,
		},
		{
			MethodName: "Catalog",
			Handler:    _Reeve_Catalog_Handler,
		},
		{
			MethodName: "UpdateCatalog",
			Handler:    _Reeve_UpdateCatalog_Handler,
		},
		{
			MethodName: "UpdatePubkeys",
			Handler:    _Reeve_UpdatePubkeys_Handler,
		},
		{
			MethodName: "WlState",
			Handler:    _Reeve_WlState_Handler,
		},
		{
			MethodName: "EpState",
			Handler:    _Reeve_EpState_Handler,
		},
		{
			MethodName: "WlUpdate",
			Handler:    _Reeve_WlUpdate_Handler,
		},
		{
			MethodName: "EpUpdate",
			Handler:    _Reeve_EpUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv_reeve.proto",
}
