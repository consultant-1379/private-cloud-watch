// Code generated by protoc-gen-go. DO NOT EDIT.
// source: srv_proctor.proto

package cruxgen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("srv_proctor.proto", fileDescriptor_c00e3092bb2eaa32) }

var fileDescriptor_c00e3092bb2eaa32 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x2e, 0x2a, 0x8b,
	0x2f, 0x28, 0xca, 0x4f, 0x2e, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f,
	0x2e, 0x2a, 0xad, 0x48, 0x4f, 0xcd, 0x93, 0xe2, 0x2a, 0xc8, 0xcc, 0x4b, 0x87, 0x08, 0x4a, 0xf1,
	0x16, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x42, 0xb9, 0x5c, 0xd9, 0x19, 0x89, 0x79, 0x10, 0xb6,
	0xd1, 0x19, 0x46, 0x2e, 0xf6, 0x00, 0x88, 0x09, 0x42, 0xa6, 0x5c, 0xec, 0xc1, 0xa9, 0x25, 0xc1,
	0x05, 0xa9, 0xc9, 0x42, 0x82, 0x7a, 0x50, 0x73, 0xf4, 0xbc, 0x33, 0x12, 0xf3, 0x40, 0x42, 0x52,
	0xa2, 0x28, 0x42, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x4a, 0x0c, 0x42, 0x7a, 0x5c,
	0xec, 0xee, 0x50, 0x6d, 0x7c, 0x70, 0x35, 0xae, 0xb9, 0x05, 0x25, 0x95, 0x52, 0x98, 0xc6, 0x28,
	0x31, 0x08, 0x69, 0x71, 0x71, 0x04, 0x64, 0xe6, 0xa5, 0x87, 0xa4, 0x16, 0x97, 0x08, 0xf1, 0xc2,
	0x15, 0x80, 0x84, 0xa4, 0x50, 0xb9, 0x60, 0xb3, 0x59, 0x02, 0x4b, 0x33, 0x4b, 0x84, 0x04, 0xe0,
	0x12, 0x20, 0x6e, 0x50, 0x6a, 0xa1, 0x94, 0x10, 0x9a, 0x48, 0x41, 0x4e, 0xa5, 0x12, 0x43, 0x12,
	0x1b, 0xd8, 0x57, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xce, 0xf9, 0xfd, 0x1a, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProctorClient is the client API for Proctor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProctorClient interface {
	SetSpec(ctx context.Context, in *KhanSpec, opts ...grpc.CallOption) (*KhanResponse, error)
	GetSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KhanSpec, error)
	PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error)
	Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitReply, error)
}

type proctorClient struct {
	cc *grpc.ClientConn
}

func NewProctorClient(cc *grpc.ClientConn) ProctorClient {
	return &proctorClient{cc}
}

func (c *proctorClient) SetSpec(ctx context.Context, in *KhanSpec, opts ...grpc.CallOption) (*KhanResponse, error) {
	out := new(KhanResponse)
	err := c.cc.Invoke(ctx, "/cruxgen.Proctor/SetSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proctorClient) GetSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KhanSpec, error) {
	out := new(KhanSpec)
	err := c.cc.Invoke(ctx, "/cruxgen.Proctor/GetSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proctorClient) PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := c.cc.Invoke(ctx, "/cruxgen.Proctor/PingTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proctorClient) Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitReply, error) {
	out := new(QuitReply)
	err := c.cc.Invoke(ctx, "/cruxgen.Proctor/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProctorServer is the server API for Proctor service.
type ProctorServer interface {
	SetSpec(context.Context, *KhanSpec) (*KhanResponse, error)
	GetSpec(context.Context, *Empty) (*KhanSpec, error)
	PingTest(context.Context, *Ping) (*Ping, error)
	Quit(context.Context, *QuitReq) (*QuitReply, error)
}

func RegisterProctorServer(s *grpc.Server, srv ProctorServer) {
	s.RegisterService(&_Proctor_serviceDesc, srv)
}

func _Proctor_SetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KhanSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProctorServer).SetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Proctor/SetSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProctorServer).SetSpec(ctx, req.(*KhanSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proctor_GetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProctorServer).GetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Proctor/GetSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProctorServer).GetSpec(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proctor_PingTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProctorServer).PingTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Proctor/PingTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProctorServer).PingTest(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proctor_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProctorServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Proctor/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProctorServer).Quit(ctx, req.(*QuitReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Proctor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cruxgen.Proctor",
	HandlerType: (*ProctorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSpec",
			Handler:    _Proctor_SetSpec_Handler,
		},
		{
			MethodName: "GetSpec",
			Handler:    _Proctor_GetSpec_Handler,
		},
		{
			MethodName: "PingTest",
			Handler:    _Proctor_PingTest_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _Proctor_Quit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv_proctor.proto",
}
