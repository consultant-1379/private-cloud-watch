// Code generated by protoc-gen-go. DO NOT EDIT.
// source: register.proto

package cruxgen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterInfo_Working int32

const (
	RegisterInfo_BUSY RegisterInfo_Working = 0
	RegisterInfo_DONE RegisterInfo_Working = 1
)

var RegisterInfo_Working_name = map[int32]string{
	0: "BUSY",
	1: "DONE",
}

var RegisterInfo_Working_value = map[string]int32{
	"BUSY": 0,
	"DONE": 1,
}

func (x RegisterInfo_Working) String() string {
	return proto.EnumName(RegisterInfo_Working_name, int32(x))
}

func (RegisterInfo_Working) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1303fe8288f4efb6, []int{1, 0}
}

// _enc = encrypted with flocking key
type CallBackEnc struct {
	NodeidEnc            string   `protobuf:"bytes,1,opt,name=nodeid_enc,json=nodeidEnc,proto3" json:"nodeid_enc,omitempty"`
	NetidEnc             string   `protobuf:"bytes,2,opt,name=netid_enc,json=netidEnc,proto3" json:"netid_enc,omitempty"`
	PubkeyEnc            string   `protobuf:"bytes,3,opt,name=pubkey_enc,json=pubkeyEnc,proto3" json:"pubkey_enc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallBackEnc) Reset()         { *m = CallBackEnc{} }
func (m *CallBackEnc) String() string { return proto.CompactTextString(m) }
func (*CallBackEnc) ProtoMessage()    {}
func (*CallBackEnc) Descriptor() ([]byte, []int) {
	return fileDescriptor_1303fe8288f4efb6, []int{0}
}

func (m *CallBackEnc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CallBackEnc.Unmarshal(m, b)
}
func (m *CallBackEnc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CallBackEnc.Marshal(b, m, deterministic)
}
func (m *CallBackEnc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallBackEnc.Merge(m, src)
}
func (m *CallBackEnc) XXX_Size() int {
	return xxx_messageInfo_CallBackEnc.Size(m)
}
func (m *CallBackEnc) XXX_DiscardUnknown() {
	xxx_messageInfo_CallBackEnc.DiscardUnknown(m)
}

var xxx_messageInfo_CallBackEnc proto.InternalMessageInfo

func (m *CallBackEnc) GetNodeidEnc() string {
	if m != nil {
		return m.NodeidEnc
	}
	return ""
}

func (m *CallBackEnc) GetNetidEnc() string {
	if m != nil {
		return m.NetidEnc
	}
	return ""
}

func (m *CallBackEnc) GetPubkeyEnc() string {
	if m != nil {
		return m.PubkeyEnc
	}
	return ""
}

type RegisterInfo struct {
	Nodeid               string               `protobuf:"bytes,1,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Netid                string               `protobuf:"bytes,2,opt,name=netid,proto3" json:"netid,omitempty"`
	Pubkey               string               `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Status               RegisterInfo_Working `protobuf:"varint,4,opt,name=status,proto3,enum=cruxgen.RegisterInfo_Working" json:"status,omitempty"`
	Ts                   string               `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
	Error                string               `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RegisterInfo) Reset()         { *m = RegisterInfo{} }
func (m *RegisterInfo) String() string { return proto.CompactTextString(m) }
func (*RegisterInfo) ProtoMessage()    {}
func (*RegisterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1303fe8288f4efb6, []int{1}
}

func (m *RegisterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterInfo.Unmarshal(m, b)
}
func (m *RegisterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterInfo.Marshal(b, m, deterministic)
}
func (m *RegisterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterInfo.Merge(m, src)
}
func (m *RegisterInfo) XXX_Size() int {
	return xxx_messageInfo_RegisterInfo.Size(m)
}
func (m *RegisterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterInfo proto.InternalMessageInfo

func (m *RegisterInfo) GetNodeid() string {
	if m != nil {
		return m.Nodeid
	}
	return ""
}

func (m *RegisterInfo) GetNetid() string {
	if m != nil {
		return m.Netid
	}
	return ""
}

func (m *RegisterInfo) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *RegisterInfo) GetStatus() RegisterInfo_Working {
	if m != nil {
		return m.Status
	}
	return RegisterInfo_BUSY
}

func (m *RegisterInfo) GetTs() string {
	if m != nil {
		return m.Ts
	}
	return ""
}

func (m *RegisterInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("cruxgen.RegisterInfo_Working", RegisterInfo_Working_name, RegisterInfo_Working_value)
	proto.RegisterType((*CallBackEnc)(nil), "cruxgen.CallBackEnc")
	proto.RegisterType((*RegisterInfo)(nil), "cruxgen.RegisterInfo")
}

func init() { proto.RegisterFile("register.proto", fileDescriptor_1303fe8288f4efb6) }

var fileDescriptor_1303fe8288f4efb6 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x14, 0xec, 0xc6, 0x36, 0x4d, 0x9e, 0x1a, 0xca, 0x52, 0x25, 0x44, 0x02, 0x25, 0xa7, 0xe2, 0x21,
	0x48, 0xc5, 0x93, 0xb7, 0x6a, 0x0e, 0x5e, 0x54, 0xa2, 0x22, 0x9e, 0x24, 0x4d, 0xd7, 0x18, 0x52,
	0x76, 0xc3, 0xee, 0x06, 0xec, 0x5f, 0xfa, 0x49, 0x92, 0xdd, 0x67, 0xa9, 0xe0, 0x6d, 0x67, 0x66,
	0x67, 0xe6, 0x3d, 0x1e, 0x04, 0x92, 0x55, 0xb5, 0xd2, 0x4c, 0xa6, 0xad, 0x14, 0x5a, 0xd0, 0x71,
	0x29, 0xbb, 0xaf, 0x8a, 0xf1, 0x08, 0xda, 0x9a, 0x57, 0x96, 0x4c, 0x3e, 0xe1, 0xf0, 0xa6, 0xd8,
	0x6c, 0x96, 0x45, 0xd9, 0x64, 0xbc, 0xa4, 0x31, 0x00, 0x17, 0x6b, 0x56, 0xaf, 0xdf, 0x19, 0x2f,
	0x43, 0x32, 0x23, 0x73, 0x3f, 0xf7, 0x2d, 0xd3, 0xcb, 0x67, 0xe0, 0x73, 0xa6, 0x51, 0x75, 0x8c,
	0xea, 0x19, 0x02, 0xbd, 0x6d, 0xb7, 0x6a, 0xd8, 0xd6, 0xa8, 0x07, 0xd6, 0x6b, 0x99, 0x8c, 0x97,
	0xc9, 0x37, 0x81, 0xa3, 0x1c, 0x27, 0xba, 0xe3, 0x1f, 0x82, 0x9e, 0x82, 0x6b, 0x93, 0xb1, 0x07,
	0x11, 0x9d, 0xc2, 0xc8, 0x64, 0x62, 0x81, 0x05, 0xfd, 0x6f, 0x9b, 0x85, 0xc9, 0x88, 0xe8, 0x15,
	0xb8, 0x4a, 0x17, 0xba, 0x53, 0xe1, 0x70, 0x46, 0xe6, 0xc1, 0x22, 0x4e, 0x71, 0xcd, 0x74, 0xbf,
	0x2c, 0x7d, 0x15, 0xb2, 0xa9, 0x79, 0x95, 0xe3, 0x67, 0x1a, 0x80, 0xa3, 0x55, 0x38, 0x32, 0x51,
	0x8e, 0x56, 0x7d, 0x29, 0x93, 0x52, 0xc8, 0xd0, 0xb5, 0xa5, 0x06, 0x24, 0x31, 0x8c, 0xd1, 0x48,
	0x3d, 0x18, 0x2e, 0x5f, 0x9e, 0xde, 0x26, 0x83, 0xfe, 0x75, 0xfb, 0x70, 0x9f, 0x4d, 0xc8, 0x42,
	0x81, 0x67, 0x4b, 0xe4, 0x96, 0x9e, 0x83, 0xf7, 0x58, 0xf3, 0xea, 0x99, 0x29, 0x4d, 0x8f, 0x77,
	0x33, 0xf4, 0x54, 0xf4, 0x17, 0x26, 0x03, 0x7a, 0xfd, 0xeb, 0x63, 0x92, 0x4e, 0x77, 0xe2, 0xde,
	0x1d, 0xa2, 0x93, 0x7f, 0xb7, 0x48, 0x06, 0x17, 0x64, 0xe5, 0x9a, 0xc3, 0x5d, 0xfe, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x52, 0xcf, 0xf1, 0x31, 0xdf, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error)
	Register(ctx context.Context, in *CallBackEnc, opts ...grpc.CallOption) (Registry_RegisterClient, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := c.cc.Invoke(ctx, "/cruxgen.Registry/PingTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Register(ctx context.Context, in *CallBackEnc, opts ...grpc.CallOption) (Registry_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registry_serviceDesc.Streams[0], "/cruxgen.Registry/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_RegisterClient interface {
	Recv() (*RegisterInfo, error)
	grpc.ClientStream
}

type registryRegisterClient struct {
	grpc.ClientStream
}

func (x *registryRegisterClient) Recv() (*RegisterInfo, error) {
	m := new(RegisterInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	PingTest(context.Context, *Ping) (*Ping, error)
	Register(*CallBackEnc, Registry_RegisterServer) error
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_PingTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).PingTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Registry/PingTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).PingTest(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallBackEnc)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).Register(m, &registryRegisterServer{stream})
}

type Registry_RegisterServer interface {
	Send(*RegisterInfo) error
	grpc.ServerStream
}

type registryRegisterServer struct {
	grpc.ServerStream
}

func (x *registryRegisterServer) Send(m *RegisterInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cruxgen.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingTest",
			Handler:    _Registry_PingTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Registry_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "register.proto",
}
