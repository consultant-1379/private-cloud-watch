// Code generated by protoc-gen-go. DO NOT EDIT.
// source: srv_heartbeat.proto

package cruxgen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("srv_heartbeat.proto", fileDescriptor_aa52a5fc56e6d8f7) }

var fileDescriptor_aa52a5fc56e6d8f7 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8e, 0x3f, 0x0b, 0xc2, 0x30,
	0x10, 0x47, 0x2b, 0x88, 0x7f, 0x02, 0x15, 0x39, 0x71, 0x89, 0x5b, 0x47, 0x87, 0x0c, 0x3a, 0x3a,
	0x0b, 0x8e, 0x5a, 0xdc, 0xa5, 0x0d, 0x47, 0x1b, 0xac, 0x69, 0x4c, 0xae, 0xc5, 0x7e, 0x1f, 0x3f,
	0xa8, 0xd4, 0xd6, 0x88, 0x8e, 0xef, 0xdd, 0xe3, 0xc7, 0xb1, 0x85, 0xb3, 0xf5, 0x25, 0xc7, 0xc4,
	0x52, 0x8a, 0x09, 0x09, 0x63, 0x4b, 0x2a, 0x61, 0x2c, 0x6d, 0xf5, 0xc8, 0x50, 0x73, 0x66, 0x94,
	0xce, 0x3a, 0xc9, 0x97, 0x7d, 0x59, 0x50, 0x2e, 0x73, 0x94, 0xd7, 0x5e, 0x87, 0x0e, 0x6d, 0xad,
	0x24, 0x76, 0xb8, 0x79, 0x0e, 0xd8, 0xf4, 0xf0, 0x99, 0x83, 0x1d, 0x63, 0x1e, 0x1c, 0xcc, 0x44,
	0xbf, 0x2b, 0xf6, 0x37, 0x43, 0x0d, 0x5f, 0x79, 0xfe, 0x46, 0x31, 0x3a, 0x53, 0x6a, 0x87, 0x51,
	0x00, 0x6b, 0x36, 0x39, 0x2a, 0x9d, 0x9d, 0xd1, 0x11, 0x84, 0x3e, 0x6d, 0x15, 0xff, 0xc5, 0x28,
	0x00, 0xc1, 0x86, 0xa7, 0x4a, 0x11, 0xcc, 0xfd, 0xa1, 0xc5, 0x18, 0xef, 0x1c, 0xfe, 0x8c, 0x29,
	0x9a, 0x28, 0x48, 0x47, 0xef, 0x6f, 0xb7, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x87, 0xaf,
	0xe5, 0xff, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeartbeatClient is the client API for Heartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartbeatClient interface {
	Heartbeats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeartbeatsResponse, error)
	PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error)
	Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitReply, error)
}

type heartbeatClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeatClient(cc *grpc.ClientConn) HeartbeatClient {
	return &heartbeatClient{cc}
}

func (c *heartbeatClient) Heartbeats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeartbeatsResponse, error) {
	out := new(HeartbeatsResponse)
	err := c.cc.Invoke(ctx, "/cruxgen.Heartbeat/Heartbeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heartbeatClient) PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := c.cc.Invoke(ctx, "/cruxgen.Heartbeat/PingTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heartbeatClient) Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitReply, error) {
	out := new(QuitReply)
	err := c.cc.Invoke(ctx, "/cruxgen.Heartbeat/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeatServer is the server API for Heartbeat service.
type HeartbeatServer interface {
	Heartbeats(context.Context, *Empty) (*HeartbeatsResponse, error)
	PingTest(context.Context, *Ping) (*Ping, error)
	Quit(context.Context, *QuitReq) (*QuitReply, error)
}

func RegisterHeartbeatServer(s *grpc.Server, srv HeartbeatServer) {
	s.RegisterService(&_Heartbeat_serviceDesc, srv)
}

func _Heartbeat_Heartbeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).Heartbeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Heartbeat/Heartbeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).Heartbeats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heartbeat_PingTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).PingTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Heartbeat/PingTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).PingTest(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heartbeat_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Heartbeat/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).Quit(ctx, req.(*QuitReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heartbeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cruxgen.Heartbeat",
	HandlerType: (*HeartbeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeats",
			Handler:    _Heartbeat_Heartbeats_Handler,
		},
		{
			MethodName: "PingTest",
			Handler:    _Heartbeat_PingTest_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _Heartbeat_Quit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv_heartbeat.proto",
}
