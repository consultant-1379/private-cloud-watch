// Code generated by protoc-gen-go. DO NOT EDIT.
// source: srv_flock.proto

package cruxgen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeReply struct {
	Nodes                []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeReply) Reset()         { *m = NodeReply{} }
func (m *NodeReply) String() string { return proto.CompactTextString(m) }
func (*NodeReply) ProtoMessage()    {}
func (*NodeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_08db26d0424aec5f, []int{0}
}

func (m *NodeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReply.Unmarshal(m, b)
}
func (m *NodeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReply.Marshal(b, m, deterministic)
}
func (m *NodeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReply.Merge(m, src)
}
func (m *NodeReply) XXX_Size() int {
	return xxx_messageInfo_NodeReply.Size(m)
}
func (m *NodeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReply.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReply proto.InternalMessageInfo

func (m *NodeReply) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeReply)(nil), "cruxgen.NodeReply")
}

func init() { proto.RegisterFile("srv_flock.proto", fileDescriptor_08db26d0424aec5f) }

var fileDescriptor_08db26d0424aec5f = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x2e, 0x2a, 0x8b,
	0x4f, 0xcb, 0xc9, 0x4f, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x2e, 0x2a,
	0xad, 0x48, 0x4f, 0xcd, 0x93, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x85, 0x88, 0x2b,
	0x29, 0x72, 0x71, 0xfa, 0xe5, 0xa7, 0xa4, 0x06, 0xa5, 0x16, 0xe4, 0x54, 0x0a, 0x89, 0x70, 0xb1,
	0xe6, 0xe5, 0xa7, 0xa4, 0x16, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x06, 0x41, 0x38, 0x46, 0x66,
	0x5c, 0xac, 0x6e, 0x20, 0x93, 0x84, 0x74, 0xb9, 0x58, 0x41, 0x6a, 0x8b, 0x85, 0xf8, 0xf4, 0xa0,
	0xa6, 0xe9, 0xb9, 0xe6, 0x16, 0x94, 0x54, 0x4a, 0x09, 0xc1, 0xf9, 0x70, 0xb3, 0x94, 0x18, 0x92,
	0xd8, 0xc0, 0x36, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xce, 0xaf, 0x70, 0x8c, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlockClient is the client API for Flock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlockClient interface {
	Nodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeReply, error)
}

type flockClient struct {
	cc *grpc.ClientConn
}

func NewFlockClient(cc *grpc.ClientConn) FlockClient {
	return &flockClient{cc}
}

func (c *flockClient) Nodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeReply, error) {
	out := new(NodeReply)
	err := c.cc.Invoke(ctx, "/cruxgen.Flock/Nodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlockServer is the server API for Flock service.
type FlockServer interface {
	Nodes(context.Context, *Empty) (*NodeReply, error)
}

func RegisterFlockServer(s *grpc.Server, srv FlockServer) {
	s.RegisterService(&_Flock_serviceDesc, srv)
}

func _Flock_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlockServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Flock/Nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlockServer).Nodes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cruxgen.Flock",
	HandlerType: (*FlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nodes",
			Handler:    _Flock_Nodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv_flock.proto",
}
