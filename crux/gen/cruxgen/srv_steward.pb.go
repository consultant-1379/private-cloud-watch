// Code generated by protoc-gen-go. DO NOT EDIT.
// source: srv_steward.proto

package cruxgen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EndpointData struct {
	Txuuid               string       `protobuf:"bytes,1,opt,name=txuuid,proto3" json:"txuuid,omitempty"`
	Nodeid               string       `protobuf:"bytes,2,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Netid                string       `protobuf:"bytes,3,opt,name=netid,proto3" json:"netid,omitempty"`
	Hash                 string       `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Status               ServiceState `protobuf:"varint,5,opt,name=status,proto3,enum=cruxgen.ServiceState" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EndpointData) Reset()         { *m = EndpointData{} }
func (m *EndpointData) String() string { return proto.CompactTextString(m) }
func (*EndpointData) ProtoMessage()    {}
func (*EndpointData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b8eb21405024e34, []int{0}
}

func (m *EndpointData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndpointData.Unmarshal(m, b)
}
func (m *EndpointData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndpointData.Marshal(b, m, deterministic)
}
func (m *EndpointData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointData.Merge(m, src)
}
func (m *EndpointData) XXX_Size() int {
	return xxx_messageInfo_EndpointData.Size(m)
}
func (m *EndpointData) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointData.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointData proto.InternalMessageInfo

func (m *EndpointData) GetTxuuid() string {
	if m != nil {
		return m.Txuuid
	}
	return ""
}

func (m *EndpointData) GetNodeid() string {
	if m != nil {
		return m.Nodeid
	}
	return ""
}

func (m *EndpointData) GetNetid() string {
	if m != nil {
		return m.Netid
	}
	return ""
}

func (m *EndpointData) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *EndpointData) GetStatus() ServiceState {
	if m != nil {
		return m.Status
	}
	return ServiceState_UNK0
}

type ClientData struct {
	Txuuid               string    `protobuf:"bytes,1,opt,name=txuuid,proto3" json:"txuuid,omitempty"`
	Nodeid               string    `protobuf:"bytes,2,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Keyid                string    `protobuf:"bytes,3,opt,name=keyid,proto3" json:"keyid,omitempty"`
	Keyjson              string    `protobuf:"bytes,4,opt,name=keyjson,proto3" json:"keyjson,omitempty"`
	Status               KeyStatus `protobuf:"varint,5,opt,name=status,proto3,enum=cruxgen.KeyStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ClientData) Reset()         { *m = ClientData{} }
func (m *ClientData) String() string { return proto.CompactTextString(m) }
func (*ClientData) ProtoMessage()    {}
func (*ClientData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b8eb21405024e34, []int{1}
}

func (m *ClientData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientData.Unmarshal(m, b)
}
func (m *ClientData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientData.Marshal(b, m, deterministic)
}
func (m *ClientData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientData.Merge(m, src)
}
func (m *ClientData) XXX_Size() int {
	return xxx_messageInfo_ClientData.Size(m)
}
func (m *ClientData) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientData.DiscardUnknown(m)
}

var xxx_messageInfo_ClientData proto.InternalMessageInfo

func (m *ClientData) GetTxuuid() string {
	if m != nil {
		return m.Txuuid
	}
	return ""
}

func (m *ClientData) GetNodeid() string {
	if m != nil {
		return m.Nodeid
	}
	return ""
}

func (m *ClientData) GetKeyid() string {
	if m != nil {
		return m.Keyid
	}
	return ""
}

func (m *ClientData) GetKeyjson() string {
	if m != nil {
		return m.Keyjson
	}
	return ""
}

func (m *ClientData) GetStatus() KeyStatus {
	if m != nil {
		return m.Status
	}
	return KeyStatus_UNK2
}

func init() {
	proto.RegisterType((*EndpointData)(nil), "cruxgen.EndpointData")
	proto.RegisterType((*ClientData)(nil), "cruxgen.ClientData")
}

func init() { proto.RegisterFile("srv_steward.proto", fileDescriptor_4b8eb21405024e34) }

var fileDescriptor_4b8eb21405024e34 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x86, 0xa9, 0xf2, 0x21, 0x13, 0xc4, 0x38, 0x7e, 0x35, 0x3d, 0x91, 0x9e, 0x08, 0x89, 0x1c,
	0xf0, 0x6c, 0x8c, 0x41, 0x13, 0x13, 0x2f, 0x86, 0xea, 0xd9, 0x2c, 0xec, 0xa4, 0xac, 0xe0, 0xb6,
	0xb6, 0x53, 0xa0, 0xbf, 0x44, 0x7f, 0xab, 0x27, 0x43, 0xb7, 0x2d, 0x68, 0x8c, 0x07, 0x6f, 0x7d,
	0x9f, 0xce, 0x4c, 0x9e, 0xce, 0x14, 0x0e, 0xe3, 0x68, 0xf1, 0x1c, 0x33, 0x2d, 0x45, 0x24, 0xfb,
	0x61, 0x14, 0x70, 0x80, 0x8d, 0x49, 0x94, 0xac, 0x7c, 0xd2, 0x0e, 0x84, 0x4a, 0xfb, 0x06, 0x3a,
	0x07, 0x53, 0x12, 0x11, 0x8f, 0x49, 0x70, 0x01, 0xd6, 0x8d, 0x11, 0xd1, 0x82, 0x0c, 0x70, 0xdf,
	0x2d, 0x68, 0xdd, 0x6a, 0x19, 0x06, 0x4a, 0xf3, 0x8d, 0x60, 0x81, 0xa7, 0x50, 0xe7, 0x55, 0x92,
	0x28, 0x69, 0x5b, 0x1d, 0xab, 0xdb, 0x1c, 0xe5, 0x69, 0xcd, 0x75, 0x20, 0x49, 0x49, 0x7b, 0xc7,
	0x70, 0x93, 0xf0, 0x18, 0x6a, 0x9a, 0x58, 0x49, 0x7b, 0x37, 0xc3, 0x26, 0x20, 0x42, 0x75, 0x2a,
	0xe2, 0xa9, 0x5d, 0xcd, 0x60, 0xf6, 0x8c, 0xe7, 0x50, 0x8f, 0x59, 0x70, 0x12, 0xdb, 0xb5, 0x8e,
	0xd5, 0x6d, 0x0f, 0x4e, 0xfa, 0xb9, 0x72, 0xdf, 0xa3, 0x68, 0xa1, 0x26, 0xe4, 0xb1, 0x60, 0x1a,
	0xe5, 0x45, 0xee, 0x87, 0x05, 0x30, 0x9c, 0x2b, 0xfa, 0xbf, 0xd7, 0x8c, 0xd2, 0x8d, 0x57, 0x16,
	0xd0, 0x86, 0xc6, 0x8c, 0xd2, 0x97, 0x38, 0xd0, 0xb9, 0x5a, 0x11, 0xb1, 0xf7, 0xc3, 0x0e, 0x4b,
	0xbb, 0x7b, 0x4a, 0xbd, 0xec, 0x4d, 0xa1, 0x36, 0xf8, 0xb4, 0xa0, 0xe1, 0x99, 0xed, 0x63, 0x0f,
	0xf6, 0x1e, 0x94, 0xf6, 0x1f, 0x29, 0x66, 0xdc, 0x2f, 0x7b, 0xd6, 0xc8, 0xf9, 0x1e, 0xdd, 0x0a,
	0x5e, 0x42, 0xf3, 0xae, 0x38, 0x08, 0x6e, 0x3e, 0xbf, 0x64, 0x23, 0x7a, 0x73, 0xce, 0x7e, 0xc3,
	0xe1, 0x3c, 0x75, 0x2b, 0x38, 0x84, 0x76, 0x71, 0xaa, 0xa7, 0x50, 0x0a, 0xa6, 0xad, 0x19, 0xdb,
	0x37, 0x74, 0xec, 0x12, 0x5f, 0x4f, 0x66, 0x3a, 0x58, 0xce, 0x49, 0xfa, 0xf4, 0x4a, 0x9a, 0xdd,
	0x0a, 0x5e, 0x41, 0xcb, 0x6c, 0x35, 0x1f, 0x71, 0x54, 0xd6, 0x6e, 0x96, 0xfd, 0xd7, 0x80, 0x71,
	0x3d, 0xfb, 0x71, 0x2e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xde, 0xdb, 0x25, 0x39, 0x84, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StewardClient is the client API for Steward service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StewardClient interface {
	PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error)
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatReply, error)
	EndpointUpdate(ctx context.Context, in *EndpointData, opts ...grpc.CallOption) (*Acknowledgement, error)
	ClientUpdate(ctx context.Context, in *ClientData, opts ...grpc.CallOption) (*Acknowledgement, error)
}

type stewardClient struct {
	cc *grpc.ClientConn
}

func NewStewardClient(cc *grpc.ClientConn) StewardClient {
	return &stewardClient{cc}
}

func (c *stewardClient) PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := c.cc.Invoke(ctx, "/cruxgen.Steward/PingTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stewardClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, "/cruxgen.Steward/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stewardClient) EndpointUpdate(ctx context.Context, in *EndpointData, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := c.cc.Invoke(ctx, "/cruxgen.Steward/EndpointUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stewardClient) ClientUpdate(ctx context.Context, in *ClientData, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := c.cc.Invoke(ctx, "/cruxgen.Steward/ClientUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StewardServer is the server API for Steward service.
type StewardServer interface {
	PingTest(context.Context, *Ping) (*Ping, error)
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatReply, error)
	EndpointUpdate(context.Context, *EndpointData) (*Acknowledgement, error)
	ClientUpdate(context.Context, *ClientData) (*Acknowledgement, error)
}

func RegisterStewardServer(s *grpc.Server, srv StewardServer) {
	s.RegisterService(&_Steward_serviceDesc, srv)
}

func _Steward_PingTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StewardServer).PingTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Steward/PingTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StewardServer).PingTest(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Steward_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StewardServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Steward/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StewardServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Steward_EndpointUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StewardServer).EndpointUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Steward/EndpointUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StewardServer).EndpointUpdate(ctx, req.(*EndpointData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Steward_ClientUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StewardServer).ClientUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Steward/ClientUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StewardServer).ClientUpdate(ctx, req.(*ClientData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Steward_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cruxgen.Steward",
	HandlerType: (*StewardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingTest",
			Handler:    _Steward_PingTest_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Steward_Heartbeat_Handler,
		},
		{
			MethodName: "EndpointUpdate",
			Handler:    _Steward_EndpointUpdate_Handler,
		},
		{
			MethodName: "ClientUpdate",
			Handler:    _Steward_ClientUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv_steward.proto",
}
