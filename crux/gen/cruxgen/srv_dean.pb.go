// Code generated by protoc-gen-go. DO NOT EDIT.
// source: srv_dean.proto

package cruxgen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("srv_dean.proto", fileDescriptor_af30593ab31a9971) }

var fileDescriptor_af30593ab31a9971 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x2e, 0x2a, 0x8b,
	0x4f, 0x49, 0x4d, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x2e, 0x2a, 0xad,
	0x48, 0x4f, 0xcd, 0x93, 0xe2, 0x2a, 0xc8, 0xcc, 0x4b, 0x87, 0x08, 0x4a, 0xf1, 0x16, 0xa7, 0x16,
	0x95, 0x65, 0x26, 0xa7, 0x42, 0xb9, 0x5c, 0xd9, 0x19, 0x30, 0xf5, 0x46, 0x27, 0x19, 0xb9, 0x58,
	0x5c, 0x52, 0x13, 0xf3, 0x84, 0x4c, 0xb9, 0xd8, 0x83, 0x53, 0x4b, 0x82, 0x0b, 0x52, 0x93, 0x85,
	0x04, 0xf5, 0xa0, 0x86, 0xe8, 0x79, 0x67, 0x24, 0xe6, 0x81, 0x84, 0xa4, 0x44, 0x51, 0x84, 0x82,
	0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95, 0x18, 0x84, 0xf4, 0xb8, 0xd8, 0xdd, 0xa1, 0xda,
	0xf8, 0xe0, 0x6a, 0x5c, 0x73, 0x0b, 0x4a, 0x2a, 0xa5, 0x30, 0x8d, 0x51, 0x62, 0x10, 0xd2, 0xe2,
	0xe2, 0x08, 0xc8, 0xcc, 0x4b, 0x0f, 0x49, 0x2d, 0x2e, 0x11, 0xe2, 0x85, 0x2b, 0x00, 0x09, 0x49,
	0xa1, 0x72, 0xc1, 0x66, 0xb3, 0x04, 0x96, 0x66, 0x96, 0x08, 0x09, 0xc0, 0x25, 0x40, 0xdc, 0xa0,
	0xd4, 0x42, 0x29, 0x21, 0x34, 0x91, 0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x97, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x1f, 0x7b, 0x63, 0x14, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeanClient is the client API for Dean service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeanClient interface {
	SetSpec(ctx context.Context, in *KhanSpec, opts ...grpc.CallOption) (*KhanResponse, error)
	GetSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KhanSpec, error)
	PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error)
	Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitReply, error)
}

type deanClient struct {
	cc *grpc.ClientConn
}

func NewDeanClient(cc *grpc.ClientConn) DeanClient {
	return &deanClient{cc}
}

func (c *deanClient) SetSpec(ctx context.Context, in *KhanSpec, opts ...grpc.CallOption) (*KhanResponse, error) {
	out := new(KhanResponse)
	err := c.cc.Invoke(ctx, "/cruxgen.Dean/SetSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deanClient) GetSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KhanSpec, error) {
	out := new(KhanSpec)
	err := c.cc.Invoke(ctx, "/cruxgen.Dean/GetSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deanClient) PingTest(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := c.cc.Invoke(ctx, "/cruxgen.Dean/PingTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deanClient) Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitReply, error) {
	out := new(QuitReply)
	err := c.cc.Invoke(ctx, "/cruxgen.Dean/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeanServer is the server API for Dean service.
type DeanServer interface {
	SetSpec(context.Context, *KhanSpec) (*KhanResponse, error)
	GetSpec(context.Context, *Empty) (*KhanSpec, error)
	PingTest(context.Context, *Ping) (*Ping, error)
	Quit(context.Context, *QuitReq) (*QuitReply, error)
}

func RegisterDeanServer(s *grpc.Server, srv DeanServer) {
	s.RegisterService(&_Dean_serviceDesc, srv)
}

func _Dean_SetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KhanSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeanServer).SetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Dean/SetSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeanServer).SetSpec(ctx, req.(*KhanSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dean_GetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeanServer).GetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Dean/GetSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeanServer).GetSpec(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dean_PingTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeanServer).PingTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Dean/PingTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeanServer).PingTest(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dean_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeanServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cruxgen.Dean/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeanServer).Quit(ctx, req.(*QuitReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dean_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cruxgen.Dean",
	HandlerType: (*DeanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSpec",
			Handler:    _Dean_SetSpec_Handler,
		},
		{
			MethodName: "GetSpec",
			Handler:    _Dean_GetSpec_Handler,
		},
		{
			MethodName: "PingTest",
			Handler:    _Dean_PingTest_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _Dean_Quit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv_dean.proto",
}
