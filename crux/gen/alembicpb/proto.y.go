//line proto.y:5
package alembicpbgen

import __yyfmt__ "fmt"

//line proto.y:5

import (
	"fmt"
	"io"

	"github.com/erixzone/crux/pkg/alembicpb"
)

var Services []*alembicpb.ProtoService
var Pre string
var Package string

//line proto.y:20
type ProtoSymType struct {
	yys     int
	line    int
	column  int
	num     int
	str     string
	service *alembicpb.ProtoService
	traffic alembicpb.ProtoTraffic
}

const NUMBER = 57346
const NAME = 57347
const STRING = 57348
const PRE = 57349
const RETURNS = 57350
const RPC = 57351
const STREAM = 57352
const SERVICE = 57353
const PACKAGE = 57354
const MESSAGE = 57355
const IMPORT = 57356
const ENUM = 57357
const COMMA = 57358
const LPAR = 57359
const RPAR = 57360
const LBRACE = 57361
const RBRACE = 57362
const SYNTAX = 57363
const EQUAL = 57364
const SEMICOLON = 57365
const REPEATED = 57366

var ProtoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NUMBER",
	"NAME",
	"STRING",
	"PRE",
	"RETURNS",
	"RPC",
	"STREAM",
	"SERVICE",
	"PACKAGE",
	"MESSAGE",
	"IMPORT",
	"ENUM",
	"COMMA",
	"LPAR",
	"RPAR",
	"LBRACE",
	"RBRACE",
	"SYNTAX",
	"EQUAL",
	"SEMICOLON",
	"REPEATED",
}
var ProtoStatenames = [...]string{}

const ProtoEofCode = 1
const ProtoErrCode = 2
const ProtoInitialStackSize = 16

//line proto.y:73

type FlexLex struct {
	lval *ProtoSymType
}

func (fl *FlexLex) Lex(lv *ProtoSymType) int {
	ret := yylex()
	*lv = lval
	return ret
}

func (fl *FlexLex) Error(e string) {
	fmt.Printf("error:%s:%d: %s\n", yyfile, yylineno, e)
}

func Parse(filename string, rdr io.Reader, noisy bool) (*alembicpb.ProtoPkg, error) {
	ProtoErrorVerbose = true
	if noisy {
		ProtoDebug = 4
	} else {
		ProtoDebug = 0
	}
	Services = make([]*alembicpb.ProtoService, 0)
	// nex creates the function: func NewLexerWithInit(in io.Reader, initFun func(*Lexer)) *Lexer
	// go tool yacc creates the function: func yyParse(yylex yyLexer) int
	var fl FlexLex
	yyin = rdr
	yyfile = filename
	ret := ProtoParse(&fl)
	if ret == 1 {
		return nil, fmt.Errorf("parse failed")
	}
	return &alembicpb.ProtoPkg{Services: Services, Pre: Pre, Package: Package}, nil
}

//line yacctab:1
var ProtoExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const ProtoPrivate = 57344

const ProtoLast = 68

var ProtoAct = [...]int{

	44, 30, 31, 19, 66, 63, 62, 56, 39, 33,
	34, 12, 28, 27, 54, 50, 48, 42, 18, 47,
	23, 32, 20, 14, 2, 67, 64, 38, 37, 29,
	65, 22, 51, 59, 46, 3, 45, 43, 26, 13,
	4, 12, 5, 9, 52, 7, 16, 60, 41, 53,
	36, 35, 58, 25, 24, 17, 21, 15, 61, 57,
	55, 49, 10, 40, 6, 1, 11, 8,
}
var ProtoPact = [...]int{

	3, 28, 1, -1000, 52, 40, -1000, -1000, -1000, 50,
	-2, 11, 49, 48, 32, -10, -11, 10, -1000, -3,
	46, -1000, -1000, 45, 9, 8, -15, -1000, -1000, 43,
	-5, -1000, -1000, -1000, -1000, -3, 19, -1000, -1000, -1000,
	14, -6, 57, -7, 24, 39, -1000, -8, 56, -16,
	55, 19, 15, 42, 54, -17, -1000, -18, 7, -1000,
	12, -19, -1000, -1000, 5, -1000, -1000, -1000,
}
var ProtoPgo = [...]int{

	0, 67, 66, 0, 65, 64, 45, 63, 62, 1,
}
var ProtoR1 = [...]int{

	0, 4, 4, 4, 4, 4, 4, 4, 5, 7,
	7, 6, 8, 8, 8, 8, 9, 9, 9, 9,
	1, 2, 2, 3, 3,
}
var ProtoR2 = [...]int{

	0, 4, 2, 4, 4, 2, 2, 2, 5, 4,
	5, 2, 3, 6, 7, 2, 1, 1, 1, 1,
	2, 3, 8, 3, 4,
}
var ProtoChk = [...]int{

	-1000, -4, 21, 7, 12, 14, -5, -6, -1, 15,
	-8, -2, 13, 11, 22, 5, 6, 5, 20, 5,
	24, -6, 20, 9, 5, 5, 6, 23, 23, 19,
	-9, 5, 24, 12, 13, 5, 5, 19, 19, 23,
	-7, 5, 22, -9, -3, 17, 20, 5, 22, 4,
	22, 8, 5, 10, 22, 4, 23, 4, -3, 18,
	5, 4, 23, 23, 19, 18, 23, 20,
}
var ProtoDef = [...]int{

	0, -2, 0, 2, 0, 0, 5, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
	0, 15, 20, 0, 0, 0, 0, 3, 4, 0,
	0, 16, 17, 18, 19, 0, 0, 12, 21, 1,
	0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 13, 0, 0, 23,
	0, 0, 9, 14, 0, 24, 10, 22,
}
var ProtoTok1 = [...]int{

	1,
}
var ProtoTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24,
}
var ProtoTok3 = [...]int{
	0,
}

var ProtoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/
// Code generated by goyacc. DO NOT EDIT.

var (
	ProtoDebug        = 0
	ProtoErrorVerbose = false
)

type ProtoLexer interface {
	Lex(lval *ProtoSymType) int
	Error(s string)
}

type ProtoParser interface {
	Parse(ProtoLexer) int
	Lookahead() int
}

type ProtoParserImpl struct {
	lval  ProtoSymType
	stack [ProtoInitialStackSize]ProtoSymType
	char  int
}

func (p *ProtoParserImpl) Lookahead() int {
	return p.char
}

func ProtoNewParser() ProtoParser {
	return &ProtoParserImpl{}
}

const ProtoFlag = -1000

func ProtoTokname(c int) string {
	if c >= 1 && c-1 < len(ProtoToknames) {
		if ProtoToknames[c-1] != "" {
			return ProtoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ProtoStatname(s int) string {
	if s >= 0 && s < len(ProtoStatenames) {
		if ProtoStatenames[s] != "" {
			return ProtoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ProtoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ProtoErrorVerbose {
		return "syntax error"
	}

	for _, e := range ProtoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ProtoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ProtoPact[state]
	for tok := TOKSTART; tok-1 < len(ProtoToknames); tok++ {
		if n := base + tok; n >= 0 && n < ProtoLast && ProtoChk[ProtoAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ProtoDef[state] == -2 {
		i := 0
		for ProtoExca[i] != -1 || ProtoExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ProtoExca[i] >= 0; i += 2 {
			tok := ProtoExca[i]
			if tok < TOKSTART || ProtoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ProtoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ProtoTokname(tok)
	}
	return res
}

func Protolex1(lex ProtoLexer, lval *ProtoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ProtoTok1[0]
		goto out
	}
	if char < len(ProtoTok1) {
		token = ProtoTok1[char]
		goto out
	}
	if char >= ProtoPrivate {
		if char < ProtoPrivate+len(ProtoTok2) {
			token = ProtoTok2[char-ProtoPrivate]
			goto out
		}
	}
	for i := 0; i < len(ProtoTok3); i += 2 {
		token = ProtoTok3[i+0]
		if token == char {
			token = ProtoTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ProtoTok2[1] /* unknown char */
	}
	if ProtoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ProtoTokname(token), uint(char))
	}
	return char, token
}

func ProtoParse(Protolex ProtoLexer) int {
	return ProtoNewParser().Parse(Protolex)
}

func (Protorcvr *ProtoParserImpl) Parse(Protolex ProtoLexer) int {
	var Proton int
	var ProtoVAL ProtoSymType
	var ProtoDollar []ProtoSymType
	_ = ProtoDollar // silence set and not used
	ProtoS := Protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Protostate := 0
	Protorcvr.char = -1
	Prototoken := -1 // Protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Protostate = -1
		Protorcvr.char = -1
		Prototoken = -1
	}()
	Protop := -1
	goto Protostack

ret0:
	return 0

ret1:
	return 1

Protostack:
	/* put a state and value onto the stack */
	if ProtoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ProtoTokname(Prototoken), ProtoStatname(Protostate))
	}

	Protop++
	if Protop >= len(ProtoS) {
		nyys := make([]ProtoSymType, len(ProtoS)*2)
		copy(nyys, ProtoS)
		ProtoS = nyys
	}
	ProtoS[Protop] = ProtoVAL
	ProtoS[Protop].yys = Protostate

Protonewstate:
	Proton = ProtoPact[Protostate]
	if Proton <= ProtoFlag {
		goto Protodefault /* simple state */
	}
	if Protorcvr.char < 0 {
		Protorcvr.char, Prototoken = Protolex1(Protolex, &Protorcvr.lval)
	}
	Proton += Prototoken
	if Proton < 0 || Proton >= ProtoLast {
		goto Protodefault
	}
	Proton = ProtoAct[Proton]
	if ProtoChk[Proton] == Prototoken { /* valid shift */
		Protorcvr.char = -1
		Prototoken = -1
		ProtoVAL = Protorcvr.lval
		Protostate = Proton
		if Errflag > 0 {
			Errflag--
		}
		goto Protostack
	}

Protodefault:
	/* default state action */
	Proton = ProtoDef[Protostate]
	if Proton == -2 {
		if Protorcvr.char < 0 {
			Protorcvr.char, Prototoken = Protolex1(Protolex, &Protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ProtoExca[xi+0] == -1 && ProtoExca[xi+1] == Protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Proton = ProtoExca[xi+0]
			if Proton < 0 || Proton == Prototoken {
				break
			}
		}
		Proton = ProtoExca[xi+1]
		if Proton < 0 {
			goto ret0
		}
	}
	if Proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Protolex.Error(ProtoErrorMessage(Protostate, Prototoken))
			Nerrs++
			if ProtoDebug >= 1 {
				__yyfmt__.Printf("%s", ProtoStatname(Protostate))
				__yyfmt__.Printf(" saw %s\n", ProtoTokname(Prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Protop >= 0 {
				Proton = ProtoPact[ProtoS[Protop].yys] + ProtoErrCode
				if Proton >= 0 && Proton < ProtoLast {
					Protostate = ProtoAct[Proton] /* simulate a shift of "error" */
					if ProtoChk[Protostate] == ProtoErrCode {
						goto Protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ProtoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ProtoS[Protop].yys)
				}
				Protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ProtoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ProtoTokname(Prototoken))
			}
			if Prototoken == ProtoEofCode {
				goto ret1
			}
			Protorcvr.char = -1
			Prototoken = -1
			goto Protonewstate /* try again in the same state */
		}
	}

	/* reduction by production Proton */
	if ProtoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Proton, ProtoStatname(Protostate))
	}

	Protont := Proton
	Protopt := Protop
	_ = Protopt // guard against "declared and not used"

	Protop -= ProtoR2[Proton]
	// Protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if Protop+1 >= len(ProtoS) {
		nyys := make([]ProtoSymType, len(ProtoS)*2)
		copy(nyys, ProtoS)
		ProtoS = nyys
	}
	ProtoVAL = ProtoS[Protop+1]

	/* consult goto table to find next state */
	Proton = ProtoR1[Proton]
	Protog := ProtoPgo[Proton]
	Protoj := Protog + ProtoS[Protop].yys + 1

	if Protoj >= ProtoLast {
		Protostate = ProtoAct[Protog]
	} else {
		Protostate = ProtoAct[Protoj]
		if ProtoChk[Protostate] != -Proton {
			Protostate = ProtoAct[Protog]
		}
	}
	// dummy call; replaced with literal code
	switch Protont {

	case 2:
		ProtoDollar = ProtoS[Protopt-2 : Protopt+1]
		//line proto.y:41
		{
			Pre = ProtoDollar[2].str
		}
	case 3:
		ProtoDollar = ProtoS[Protopt-4 : Protopt+1]
		//line proto.y:42
		{
			Package = ProtoDollar[3].str
		}
	case 20:
		ProtoDollar = ProtoS[Protopt-2 : Protopt+1]
		//line proto.y:65
		{
			Services = append(Services, ProtoDollar[1].service)
		}
	case 21:
		ProtoDollar = ProtoS[Protopt-3 : Protopt+1]
		//line proto.y:67
		{
			ProtoVAL.service = &alembicpb.ProtoService{Name: ProtoDollar[2].str}
		}
	case 22:
		ProtoDollar = ProtoS[Protopt-8 : Protopt+1]
		//line proto.y:68
		{
			ProtoVAL.service = ProtoDollar[1].service
			ProtoVAL.service.RPC = append(ProtoVAL.service.RPC, alembicpb.ProtoRPC{Name: ProtoDollar[3].str, Req: ProtoDollar[4].traffic, Reply: ProtoDollar[6].traffic})
		}
	case 23:
		ProtoDollar = ProtoS[Protopt-3 : Protopt+1]
		//line proto.y:70
		{
			ProtoVAL.traffic = alembicpb.ProtoTraffic{Name: ProtoDollar[2].str, Streaming: false}
		}
	case 24:
		ProtoDollar = ProtoS[Protopt-4 : Protopt+1]
		//line proto.y:71
		{
			ProtoVAL.traffic = alembicpb.ProtoTraffic{Name: ProtoDollar[3].str, Streaming: true}
		}
	}
	goto Protostack /* stack new state and value */
}
