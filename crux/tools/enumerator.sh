#!/bin/sh

export LANG=C

help(){
	cat <<'EOF'
	Enumerator is a simple script for handling simple enumerated types in Go.
Usage is
	enumerator [--help] < specfile > source.go

The input specifies the package name and a number of types.
For each type, you specify the type's name and the symbolic names for that type.
The symbolic names are assigned ascending values starting at zero.
The output has Go type declarations, const declarations and defines a String function for each type.
The output has been run through the Go formatter and will run cleanly through go lint and go vet.

The input format is simple. Each non-empty line specifies either the package
	package lib
or the type name
	type Fruit should be used for distinguishing different kinds of fruit
or the various symbolic names
	Apple
	Tomato technically a fruit, but mostly a veggie
	Pineapple

Fields are white-space seperated.
If the first field is not 'package' or 'type', it is presumed to be a symbolic name.
Any additional fields are presumed to be comments (restricted to one line).
As a special case, the comment for a type is printed immediately before the type declaration
and the type name is inserted as the first word.
The above example input yields:
package lib

// DO NOT EDIT THIS FILE!! this is code generated by enumerator

import "fmt"

// Fruit should be used for distinguishing different kinds of fruit
type Fruit int

const (
	Apple     Fruit = 0
	Tomato    Fruit = 1 // technically a fruit, but mostly a veggie
	Pineapple Fruit = 2
)

// String converts Fruit values into strings.
func (x Fruit) String() string {
	switch x {
	case Tomato:
		return "Tomato"
	case Pineapple:
		return "Pineapple"
	case Apple:
		return "Apple"
	}
	return fmt.Sprintf("unknown_Fruit_%d", x)
}
EOF
exit 0
}

case "$1" in
"-help"|"--help")
	help
	;;
esac

gawk '
function endtype(	srt,n,i){
	if(type != ""){
		printf(")\n")
		printf("// String converts %s values into strings.\n", type)
		printf("func (x %s) String() string{\n", type)
		printf("switch(x){\n")
		n = asorti(vals, srt)
		for(i = 1; i <= n; i++) printf("case %s: return \"%s\"\n", srt[i], srt[i])
		printf("}\nreturn fmt.Sprintf(\"unknown_%s_%%d\", x)\n", type)
		printf("}\n")
		delete vals
	}
}
function comment(n,	i,x){
	x = ""
	for(i = n; i <= NF; i++) x = x " " $i
	return substr(x, 2)
}
BEGIN {
}
$1=="package"	{
	pkg = $2
	printf("package %s\n", pkg)
	printf("// DO NOT EDIT THIS FILE!! this is code generated by enumerator\n\n")
	printf("import \"fmt\"\n")
	type = ""
	next
}
$1=="type"	{
	endtype()
	type = $2
	if($3 != ""){
		printf("// %s %s\n", type, comment(3))
	}
	printf("type %s int\n", type)
	printf("// define the various symbolic constants for type %s\n", type)
	printf("const (\n")
	ind = 0
	next
}
 {
	 if($0 == "") next
 	printf("%s %s = %d", $1, type, ind++)
	if($2 != ""){
		printf(" // %s", comment(2))
	}
	printf("\n")
	vals[$1] = 1
}
END {
	endtype()
}' | gofmt
