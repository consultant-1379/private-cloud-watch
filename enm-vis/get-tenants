#!/usr/bin/env python3

# run on the output of gen-tenants to get a list
# of tenant names and corresponding vnflaf-services
# node addresses that are reachable from the CAS.

import sys
import re
from collections import namedtuple

Server = namedtuple('Server', 'ID Name Status Networks ImageName')

def splitx(l, sep):
	a = l.split(sep)
	a = [ e.strip() for e in a if e != '' ]
	return a

def get_data(l):
	svr = Server(*splitx(l, '|'))
	nets = splitx(svr.Networks, ';')
	netdict = dict()
	for net in nets:
		name, addrs = splitx(net, '=')
		addrs = splitx(addrs, ',')
		netdict[name] = tuple(addrs)
	return svr._replace(Networks=netdict)

def access_addr(nets):
	key = [ k for k in nets if k.startswith('PNET-ATL60-') ]
	if len(key) != 1:
		return None
	addr = [ a for a in nets[key[0]] if '.' in a ]
	if len(addr) != 1:
		return None
	return addr[0]

begin_re = re.compile(r'### USERBEGIN ([^ ]+) ###$')

fp = open('tenants.out', 'r')
lineno = 0
datatrigger = False
lafs = []
for l in fp:
	lineno += 1
	l = l.strip()
	m = begin_re.match(l)
	if m is not None:
		datatrigger = True
	elif datatrigger:
		datatrigger = False
		svr = get_data(l)
		#print(svr)
		lafs.append(svr)
fp.close()

lafs.sort(key=lambda e: e.Name.lower())

width = max(len(e.Name) for e in lafs)
trim = len('-vnflaf-services-0')
width -= trim

for laf in lafs:
	#print(laf, '\n')
	print(laf.Name[:-trim].ljust(width), access_addr(laf.Networks))
